// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: marketplace_item.proto

package marketplace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketplaceItemServiceClient is the client API for MarketplaceItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceItemServiceClient interface {
	ListItems(ctx context.Context, in *ListMarketplaceItemRequest, opts ...grpc.CallOption) (*ListMarketplaceItemResponse, error)
	UnlistListedItems(ctx context.Context, in *UnlistMarketplaceListedItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetItemById(ctx context.Context, in *GetMarketplaceItemByIdRequest, opts ...grpc.CallOption) (*MarketplaceItemResponse, error)
	Filter(ctx context.Context, in *MarketplaceFilterRequest, opts ...grpc.CallOption) (*MarketplaceFilterResponse, error)
}

type marketplaceItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceItemServiceClient(cc grpc.ClientConnInterface) MarketplaceItemServiceClient {
	return &marketplaceItemServiceClient{cc}
}

func (c *marketplaceItemServiceClient) ListItems(ctx context.Context, in *ListMarketplaceItemRequest, opts ...grpc.CallOption) (*ListMarketplaceItemResponse, error) {
	out := new(ListMarketplaceItemResponse)
	err := c.cc.Invoke(ctx, "/marketplace.item.MarketplaceItemService/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceItemServiceClient) UnlistListedItems(ctx context.Context, in *UnlistMarketplaceListedItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/marketplace.item.MarketplaceItemService/UnlistListedItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceItemServiceClient) GetItemById(ctx context.Context, in *GetMarketplaceItemByIdRequest, opts ...grpc.CallOption) (*MarketplaceItemResponse, error) {
	out := new(MarketplaceItemResponse)
	err := c.cc.Invoke(ctx, "/marketplace.item.MarketplaceItemService/GetItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceItemServiceClient) Filter(ctx context.Context, in *MarketplaceFilterRequest, opts ...grpc.CallOption) (*MarketplaceFilterResponse, error) {
	out := new(MarketplaceFilterResponse)
	err := c.cc.Invoke(ctx, "/marketplace.item.MarketplaceItemService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceItemServiceServer is the server API for MarketplaceItemService service.
// All implementations must embed UnimplementedMarketplaceItemServiceServer
// for forward compatibility
type MarketplaceItemServiceServer interface {
	ListItems(context.Context, *ListMarketplaceItemRequest) (*ListMarketplaceItemResponse, error)
	UnlistListedItems(context.Context, *UnlistMarketplaceListedItemRequest) (*emptypb.Empty, error)
	GetItemById(context.Context, *GetMarketplaceItemByIdRequest) (*MarketplaceItemResponse, error)
	Filter(context.Context, *MarketplaceFilterRequest) (*MarketplaceFilterResponse, error)
	mustEmbedUnimplementedMarketplaceItemServiceServer()
}

// UnimplementedMarketplaceItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceItemServiceServer struct {
}

func (UnimplementedMarketplaceItemServiceServer) ListItems(context.Context, *ListMarketplaceItemRequest) (*ListMarketplaceItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedMarketplaceItemServiceServer) UnlistListedItems(context.Context, *UnlistMarketplaceListedItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlistListedItems not implemented")
}
func (UnimplementedMarketplaceItemServiceServer) GetItemById(context.Context, *GetMarketplaceItemByIdRequest) (*MarketplaceItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemById not implemented")
}
func (UnimplementedMarketplaceItemServiceServer) Filter(context.Context, *MarketplaceFilterRequest) (*MarketplaceFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedMarketplaceItemServiceServer) mustEmbedUnimplementedMarketplaceItemServiceServer() {
}

// UnsafeMarketplaceItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceItemServiceServer will
// result in compilation errors.
type UnsafeMarketplaceItemServiceServer interface {
	mustEmbedUnimplementedMarketplaceItemServiceServer()
}

func RegisterMarketplaceItemServiceServer(s grpc.ServiceRegistrar, srv MarketplaceItemServiceServer) {
	s.RegisterService(&MarketplaceItemService_ServiceDesc, srv)
}

func _MarketplaceItemService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketplaceItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceItemServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace.item.MarketplaceItemService/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceItemServiceServer).ListItems(ctx, req.(*ListMarketplaceItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceItemService_UnlistListedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlistMarketplaceListedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceItemServiceServer).UnlistListedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace.item.MarketplaceItemService/UnlistListedItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceItemServiceServer).UnlistListedItems(ctx, req.(*UnlistMarketplaceListedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceItemService_GetItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketplaceItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceItemServiceServer).GetItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace.item.MarketplaceItemService/GetItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceItemServiceServer).GetItemById(ctx, req.(*GetMarketplaceItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceItemService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketplaceFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceItemServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketplace.item.MarketplaceItemService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceItemServiceServer).Filter(ctx, req.(*MarketplaceFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketplaceItemService_ServiceDesc is the grpc.ServiceDesc for MarketplaceItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace.item.MarketplaceItemService",
	HandlerType: (*MarketplaceItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItems",
			Handler:    _MarketplaceItemService_ListItems_Handler,
		},
		{
			MethodName: "UnlistListedItems",
			Handler:    _MarketplaceItemService_UnlistListedItems_Handler,
		},
		{
			MethodName: "GetItemById",
			Handler:    _MarketplaceItemService_GetItemById_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _MarketplaceItemService_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketplace_item.proto",
}
