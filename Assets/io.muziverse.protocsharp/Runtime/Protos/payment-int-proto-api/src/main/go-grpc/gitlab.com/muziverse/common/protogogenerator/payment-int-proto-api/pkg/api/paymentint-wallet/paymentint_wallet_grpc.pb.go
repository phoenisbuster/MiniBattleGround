// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: paymentint_wallet.proto

package paymentint_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentIntWalletServiceClient is the client API for PaymentIntWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentIntWalletServiceClient interface {
	ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ListImportWalletResponse, error)
	AllocateWallet(ctx context.Context, in *AllocateWalletRequest, opts ...grpc.CallOption) (*ListAllocateWalletResponse, error)
}

type paymentIntWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentIntWalletServiceClient(cc grpc.ClientConnInterface) PaymentIntWalletServiceClient {
	return &paymentIntWalletServiceClient{cc}
}

func (c *paymentIntWalletServiceClient) ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ListImportWalletResponse, error) {
	out := new(ListImportWalletResponse)
	err := c.cc.Invoke(ctx, "/paymentint.wallet.PaymentIntWalletService/ImportWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentIntWalletServiceClient) AllocateWallet(ctx context.Context, in *AllocateWalletRequest, opts ...grpc.CallOption) (*ListAllocateWalletResponse, error) {
	out := new(ListAllocateWalletResponse)
	err := c.cc.Invoke(ctx, "/paymentint.wallet.PaymentIntWalletService/AllocateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentIntWalletServiceServer is the server API for PaymentIntWalletService service.
// All implementations must embed UnimplementedPaymentIntWalletServiceServer
// for forward compatibility
type PaymentIntWalletServiceServer interface {
	ImportWallet(context.Context, *ImportWalletRequest) (*ListImportWalletResponse, error)
	AllocateWallet(context.Context, *AllocateWalletRequest) (*ListAllocateWalletResponse, error)
	mustEmbedUnimplementedPaymentIntWalletServiceServer()
}

// UnimplementedPaymentIntWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentIntWalletServiceServer struct {
}

func (UnimplementedPaymentIntWalletServiceServer) ImportWallet(context.Context, *ImportWalletRequest) (*ListImportWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWallet not implemented")
}
func (UnimplementedPaymentIntWalletServiceServer) AllocateWallet(context.Context, *AllocateWalletRequest) (*ListAllocateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateWallet not implemented")
}
func (UnimplementedPaymentIntWalletServiceServer) mustEmbedUnimplementedPaymentIntWalletServiceServer() {
}

// UnsafePaymentIntWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentIntWalletServiceServer will
// result in compilation errors.
type UnsafePaymentIntWalletServiceServer interface {
	mustEmbedUnimplementedPaymentIntWalletServiceServer()
}

func RegisterPaymentIntWalletServiceServer(s grpc.ServiceRegistrar, srv PaymentIntWalletServiceServer) {
	s.RegisterService(&PaymentIntWalletService_ServiceDesc, srv)
}

func _PaymentIntWalletService_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntWalletServiceServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentint.wallet.PaymentIntWalletService/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntWalletServiceServer).ImportWallet(ctx, req.(*ImportWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentIntWalletService_AllocateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntWalletServiceServer).AllocateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentint.wallet.PaymentIntWalletService/AllocateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntWalletServiceServer).AllocateWallet(ctx, req.(*AllocateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentIntWalletService_ServiceDesc is the grpc.ServiceDesc for PaymentIntWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentIntWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paymentint.wallet.PaymentIntWalletService",
	HandlerType: (*PaymentIntWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportWallet",
			Handler:    _PaymentIntWalletService_ImportWallet_Handler,
		},
		{
			MethodName: "AllocateWallet",
			Handler:    _PaymentIntWalletService_AllocateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paymentint_wallet.proto",
}
