// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_wallet_challenge.proto

package challenge

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/user-proto-api/pkg/domain"
	wallet "gitlab.com/muziverse/common/protogogenerator/user-proto-api/pkg/wallet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserWalletChallengeServiceClient is the client API for UserWalletChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWalletChallengeServiceClient interface {
	VerifyWalletConsent(ctx context.Context, in *wallet.UserWalletConsentRequest, opts ...grpc.CallOption) (*domain.UserAccessResponse, error)
}

type userWalletChallengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWalletChallengeServiceClient(cc grpc.ClientConnInterface) UserWalletChallengeServiceClient {
	return &userWalletChallengeServiceClient{cc}
}

func (c *userWalletChallengeServiceClient) VerifyWalletConsent(ctx context.Context, in *wallet.UserWalletConsentRequest, opts ...grpc.CallOption) (*domain.UserAccessResponse, error) {
	out := new(domain.UserAccessResponse)
	err := c.cc.Invoke(ctx, "/identity.challenge.UserWalletChallengeService/VerifyWalletConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWalletChallengeServiceServer is the server API for UserWalletChallengeService service.
// All implementations must embed UnimplementedUserWalletChallengeServiceServer
// for forward compatibility
type UserWalletChallengeServiceServer interface {
	VerifyWalletConsent(context.Context, *wallet.UserWalletConsentRequest) (*domain.UserAccessResponse, error)
	mustEmbedUnimplementedUserWalletChallengeServiceServer()
}

// UnimplementedUserWalletChallengeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserWalletChallengeServiceServer struct {
}

func (UnimplementedUserWalletChallengeServiceServer) VerifyWalletConsent(context.Context, *wallet.UserWalletConsentRequest) (*domain.UserAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWalletConsent not implemented")
}
func (UnimplementedUserWalletChallengeServiceServer) mustEmbedUnimplementedUserWalletChallengeServiceServer() {
}

// UnsafeUserWalletChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWalletChallengeServiceServer will
// result in compilation errors.
type UnsafeUserWalletChallengeServiceServer interface {
	mustEmbedUnimplementedUserWalletChallengeServiceServer()
}

func RegisterUserWalletChallengeServiceServer(s grpc.ServiceRegistrar, srv UserWalletChallengeServiceServer) {
	s.RegisterService(&UserWalletChallengeService_ServiceDesc, srv)
}

func _UserWalletChallengeService_VerifyWalletConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wallet.UserWalletConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletChallengeServiceServer).VerifyWalletConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.challenge.UserWalletChallengeService/VerifyWalletConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletChallengeServiceServer).VerifyWalletConsent(ctx, req.(*wallet.UserWalletConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWalletChallengeService_ServiceDesc is the grpc.ServiceDesc for UserWalletChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWalletChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.challenge.UserWalletChallengeService",
	HandlerType: (*UserWalletChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyWalletConsent",
			Handler:    _UserWalletChallengeService_VerifyWalletConsent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_wallet_challenge.proto",
}
