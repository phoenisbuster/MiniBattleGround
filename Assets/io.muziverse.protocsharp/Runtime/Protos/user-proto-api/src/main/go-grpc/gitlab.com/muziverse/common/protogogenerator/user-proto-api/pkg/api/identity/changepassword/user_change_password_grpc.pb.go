// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_change_password.proto

package changepassword

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserChangePasswordServiceClient is the client API for UserChangePasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserChangePasswordServiceClient interface {
	RequestOtp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userChangePasswordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserChangePasswordServiceClient(cc grpc.ClientConnInterface) UserChangePasswordServiceClient {
	return &userChangePasswordServiceClient{cc}
}

func (c *userChangePasswordServiceClient) RequestOtp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.changepassword.UserChangePasswordService/RequestOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userChangePasswordServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.changepassword.UserChangePasswordService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserChangePasswordServiceServer is the server API for UserChangePasswordService service.
// All implementations must embed UnimplementedUserChangePasswordServiceServer
// for forward compatibility
type UserChangePasswordServiceServer interface {
	RequestOtp(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserChangePasswordServiceServer()
}

// UnimplementedUserChangePasswordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserChangePasswordServiceServer struct {
}

func (UnimplementedUserChangePasswordServiceServer) RequestOtp(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtp not implemented")
}
func (UnimplementedUserChangePasswordServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserChangePasswordServiceServer) mustEmbedUnimplementedUserChangePasswordServiceServer() {
}

// UnsafeUserChangePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserChangePasswordServiceServer will
// result in compilation errors.
type UnsafeUserChangePasswordServiceServer interface {
	mustEmbedUnimplementedUserChangePasswordServiceServer()
}

func RegisterUserChangePasswordServiceServer(s grpc.ServiceRegistrar, srv UserChangePasswordServiceServer) {
	s.RegisterService(&UserChangePasswordService_ServiceDesc, srv)
}

func _UserChangePasswordService_RequestOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChangePasswordServiceServer).RequestOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.changepassword.UserChangePasswordService/RequestOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChangePasswordServiceServer).RequestOtp(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserChangePasswordService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChangePasswordServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.changepassword.UserChangePasswordService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChangePasswordServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserChangePasswordService_ServiceDesc is the grpc.ServiceDesc for UserChangePasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserChangePasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.changepassword.UserChangePasswordService",
	HandlerType: (*UserChangePasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOtp",
			Handler:    _UserChangePasswordService_RequestOtp_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserChangePasswordService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_change_password.proto",
}
