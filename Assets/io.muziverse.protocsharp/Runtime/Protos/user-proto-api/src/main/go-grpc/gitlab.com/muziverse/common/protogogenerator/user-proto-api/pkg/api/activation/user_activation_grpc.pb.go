// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_activation.proto

package activation

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/user-proto-api/pkg/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserActivationServiceClient is the client API for UserActivationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActivationServiceClient interface {
	UserActivation(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error)
	ResendActivationCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userActivationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActivationServiceClient(cc grpc.ClientConnInterface) UserActivationServiceClient {
	return &userActivationServiceClient{cc}
}

func (c *userActivationServiceClient) UserActivation(ctx context.Context, in *ActivationRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error) {
	out := new(domain.AccessFlowResponse)
	err := c.cc.Invoke(ctx, "/identity.activation.UserActivationService/UserActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActivationServiceClient) ResendActivationCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.activation.UserActivationService/ResendActivationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActivationServiceServer is the server API for UserActivationService service.
// All implementations must embed UnimplementedUserActivationServiceServer
// for forward compatibility
type UserActivationServiceServer interface {
	UserActivation(context.Context, *ActivationRequest) (*domain.AccessFlowResponse, error)
	ResendActivationCode(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserActivationServiceServer()
}

// UnimplementedUserActivationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserActivationServiceServer struct {
}

func (UnimplementedUserActivationServiceServer) UserActivation(context.Context, *ActivationRequest) (*domain.AccessFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivation not implemented")
}
func (UnimplementedUserActivationServiceServer) ResendActivationCode(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendActivationCode not implemented")
}
func (UnimplementedUserActivationServiceServer) mustEmbedUnimplementedUserActivationServiceServer() {}

// UnsafeUserActivationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActivationServiceServer will
// result in compilation errors.
type UnsafeUserActivationServiceServer interface {
	mustEmbedUnimplementedUserActivationServiceServer()
}

func RegisterUserActivationServiceServer(s grpc.ServiceRegistrar, srv UserActivationServiceServer) {
	s.RegisterService(&UserActivationService_ServiceDesc, srv)
}

func _UserActivationService_UserActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActivationServiceServer).UserActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.activation.UserActivationService/UserActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActivationServiceServer).UserActivation(ctx, req.(*ActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserActivationService_ResendActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActivationServiceServer).ResendActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.activation.UserActivationService/ResendActivationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActivationServiceServer).ResendActivationCode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserActivationService_ServiceDesc is the grpc.ServiceDesc for UserActivationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserActivationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.activation.UserActivationService",
	HandlerType: (*UserActivationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserActivation",
			Handler:    _UserActivationService_UserActivation_Handler,
		},
		{
			MethodName: "ResendActivationCode",
			Handler:    _UserActivationService_ResendActivationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_activation.proto",
}
