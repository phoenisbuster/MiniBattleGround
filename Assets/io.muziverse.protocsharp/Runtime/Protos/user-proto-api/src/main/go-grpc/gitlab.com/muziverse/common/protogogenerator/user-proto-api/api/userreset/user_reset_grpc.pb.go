// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_reset.proto

package userreset

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/user-proto-api/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserResetServiceClient is the client API for UserResetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserResetServiceClient interface {
	SendResetPasswordCode(ctx context.Context, in *ResetPasswordCodeRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error)
	CheckOtpCode(ctx context.Context, in *OtpCodeRequest, opts ...grpc.CallOption) (*ResetTokenResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error)
}

type userResetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserResetServiceClient(cc grpc.ClientConnInterface) UserResetServiceClient {
	return &userResetServiceClient{cc}
}

func (c *userResetServiceClient) SendResetPasswordCode(ctx context.Context, in *ResetPasswordCodeRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error) {
	out := new(domain.AccessFlowResponse)
	err := c.cc.Invoke(ctx, "/identity.activation.UserResetService/SendResetPasswordCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResetServiceClient) CheckOtpCode(ctx context.Context, in *OtpCodeRequest, opts ...grpc.CallOption) (*ResetTokenResponse, error) {
	out := new(ResetTokenResponse)
	err := c.cc.Invoke(ctx, "/identity.activation.UserResetService/CheckOtpCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userResetServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*domain.AccessFlowResponse, error) {
	out := new(domain.AccessFlowResponse)
	err := c.cc.Invoke(ctx, "/identity.activation.UserResetService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserResetServiceServer is the server API for UserResetService service.
// All implementations must embed UnimplementedUserResetServiceServer
// for forward compatibility
type UserResetServiceServer interface {
	SendResetPasswordCode(context.Context, *ResetPasswordCodeRequest) (*domain.AccessFlowResponse, error)
	CheckOtpCode(context.Context, *OtpCodeRequest) (*ResetTokenResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*domain.AccessFlowResponse, error)
	mustEmbedUnimplementedUserResetServiceServer()
}

// UnimplementedUserResetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserResetServiceServer struct {
}

func (UnimplementedUserResetServiceServer) SendResetPasswordCode(context.Context, *ResetPasswordCodeRequest) (*domain.AccessFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordCode not implemented")
}
func (UnimplementedUserResetServiceServer) CheckOtpCode(context.Context, *OtpCodeRequest) (*ResetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOtpCode not implemented")
}
func (UnimplementedUserResetServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*domain.AccessFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserResetServiceServer) mustEmbedUnimplementedUserResetServiceServer() {}

// UnsafeUserResetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserResetServiceServer will
// result in compilation errors.
type UnsafeUserResetServiceServer interface {
	mustEmbedUnimplementedUserResetServiceServer()
}

func RegisterUserResetServiceServer(s grpc.ServiceRegistrar, srv UserResetServiceServer) {
	s.RegisterService(&UserResetService_ServiceDesc, srv)
}

func _UserResetService_SendResetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResetServiceServer).SendResetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.activation.UserResetService/SendResetPasswordCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResetServiceServer).SendResetPasswordCode(ctx, req.(*ResetPasswordCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResetService_CheckOtpCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResetServiceServer).CheckOtpCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.activation.UserResetService/CheckOtpCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResetServiceServer).CheckOtpCode(ctx, req.(*OtpCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserResetService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserResetServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.activation.UserResetService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserResetServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserResetService_ServiceDesc is the grpc.ServiceDesc for UserResetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserResetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.activation.UserResetService",
	HandlerType: (*UserResetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendResetPasswordCode",
			Handler:    _UserResetService_SendResetPasswordCode_Handler,
		},
		{
			MethodName: "CheckOtpCode",
			Handler:    _UserResetService_CheckOtpCode_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserResetService_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_reset.proto",
}
