// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_registration.proto

package registration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRegistrationServiceClient is the client API for UserRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegistrationServiceClient interface {
	// Sends a greeting
	RegisterNewUser(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type userRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegistrationServiceClient(cc grpc.ClientConnInterface) UserRegistrationServiceClient {
	return &userRegistrationServiceClient{cc}
}

func (c *userRegistrationServiceClient) RegisterNewUser(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/identity.registration.UserRegistrationService/RegisterNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegistrationServiceServer is the server API for UserRegistrationService service.
// All implementations must embed UnimplementedUserRegistrationServiceServer
// for forward compatibility
type UserRegistrationServiceServer interface {
	// Sends a greeting
	RegisterNewUser(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	mustEmbedUnimplementedUserRegistrationServiceServer()
}

// UnimplementedUserRegistrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRegistrationServiceServer struct {
}

func (UnimplementedUserRegistrationServiceServer) RegisterNewUser(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedUserRegistrationServiceServer) mustEmbedUnimplementedUserRegistrationServiceServer() {
}

// UnsafeUserRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegistrationServiceServer will
// result in compilation errors.
type UnsafeUserRegistrationServiceServer interface {
	mustEmbedUnimplementedUserRegistrationServiceServer()
}

func RegisterUserRegistrationServiceServer(s grpc.ServiceRegistrar, srv UserRegistrationServiceServer) {
	s.RegisterService(&UserRegistrationService_ServiceDesc, srv)
}

func _UserRegistrationService_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistrationServiceServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.registration.UserRegistrationService/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistrationServiceServer).RegisterNewUser(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegistrationService_ServiceDesc is the grpc.ServiceDesc for UserRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.registration.UserRegistrationService",
	HandlerType: (*UserRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewUser",
			Handler:    _UserRegistrationService_RegisterNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_registration.proto",
}
