// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_change_identity.proto

package ChangeIdentity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserChangeIdentityServiceClient is the client API for UserChangeIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserChangeIdentityServiceClient interface {
	RequestOtp(ctx context.Context, in *RequestOtpIdentity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResendOtp(ctx context.Context, in *RequestOtpIdentity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeIdentity(ctx context.Context, in *ChangeIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userChangeIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserChangeIdentityServiceClient(cc grpc.ClientConnInterface) UserChangeIdentityServiceClient {
	return &userChangeIdentityServiceClient{cc}
}

func (c *userChangeIdentityServiceClient) RequestOtp(ctx context.Context, in *RequestOtpIdentity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.modification.UserChangeIdentityService/RequestOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userChangeIdentityServiceClient) ResendOtp(ctx context.Context, in *RequestOtpIdentity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.modification.UserChangeIdentityService/ResendOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userChangeIdentityServiceClient) ChangeIdentity(ctx context.Context, in *ChangeIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/identity.modification.UserChangeIdentityService/ChangeIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserChangeIdentityServiceServer is the server API for UserChangeIdentityService service.
// All implementations must embed UnimplementedUserChangeIdentityServiceServer
// for forward compatibility
type UserChangeIdentityServiceServer interface {
	RequestOtp(context.Context, *RequestOtpIdentity) (*emptypb.Empty, error)
	ResendOtp(context.Context, *RequestOtpIdentity) (*emptypb.Empty, error)
	ChangeIdentity(context.Context, *ChangeIdentityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserChangeIdentityServiceServer()
}

// UnimplementedUserChangeIdentityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserChangeIdentityServiceServer struct {
}

func (UnimplementedUserChangeIdentityServiceServer) RequestOtp(context.Context, *RequestOtpIdentity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOtp not implemented")
}
func (UnimplementedUserChangeIdentityServiceServer) ResendOtp(context.Context, *RequestOtpIdentity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOtp not implemented")
}
func (UnimplementedUserChangeIdentityServiceServer) ChangeIdentity(context.Context, *ChangeIdentityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeIdentity not implemented")
}
func (UnimplementedUserChangeIdentityServiceServer) mustEmbedUnimplementedUserChangeIdentityServiceServer() {
}

// UnsafeUserChangeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserChangeIdentityServiceServer will
// result in compilation errors.
type UnsafeUserChangeIdentityServiceServer interface {
	mustEmbedUnimplementedUserChangeIdentityServiceServer()
}

func RegisterUserChangeIdentityServiceServer(s grpc.ServiceRegistrar, srv UserChangeIdentityServiceServer) {
	s.RegisterService(&UserChangeIdentityService_ServiceDesc, srv)
}

func _UserChangeIdentityService_RequestOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOtpIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChangeIdentityServiceServer).RequestOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.modification.UserChangeIdentityService/RequestOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChangeIdentityServiceServer).RequestOtp(ctx, req.(*RequestOtpIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserChangeIdentityService_ResendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOtpIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChangeIdentityServiceServer).ResendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.modification.UserChangeIdentityService/ResendOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChangeIdentityServiceServer).ResendOtp(ctx, req.(*RequestOtpIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserChangeIdentityService_ChangeIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserChangeIdentityServiceServer).ChangeIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.modification.UserChangeIdentityService/ChangeIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserChangeIdentityServiceServer).ChangeIdentity(ctx, req.(*ChangeIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserChangeIdentityService_ServiceDesc is the grpc.ServiceDesc for UserChangeIdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserChangeIdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.modification.UserChangeIdentityService",
	HandlerType: (*UserChangeIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestOtp",
			Handler:    _UserChangeIdentityService_RequestOtp_Handler,
		},
		{
			MethodName: "ResendOtp",
			Handler:    _UserChangeIdentityService_ResendOtp_Handler,
		},
		{
			MethodName: "ChangeIdentity",
			Handler:    _UserChangeIdentityService_ChangeIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_change_identity.proto",
}
