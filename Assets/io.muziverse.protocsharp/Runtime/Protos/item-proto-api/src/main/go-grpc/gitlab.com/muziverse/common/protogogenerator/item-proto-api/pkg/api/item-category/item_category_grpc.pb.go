// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: item_category.proto

package item_category

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/item-proto-api/pkg/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemCategoryServiceClient is the client API for ItemCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemCategoryServiceClient interface {
	GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesResponse, error)
	GetCategoryByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.ItemCategory, error)
	UpsertCategoryInBatch(ctx context.Context, in *BatchUpsertCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FillOutCategoryPoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type itemCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemCategoryServiceClient(cc grpc.ClientConnInterface) ItemCategoryServiceClient {
	return &itemCategoryServiceClient{cc}
}

func (c *itemCategoryServiceClient) GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CategoriesResponse, error) {
	out := new(CategoriesResponse)
	err := c.cc.Invoke(ctx, "/item.category.ItemCategoryService/GetCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemCategoryServiceClient) GetCategoryByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.ItemCategory, error) {
	out := new(domain.ItemCategory)
	err := c.cc.Invoke(ctx, "/item.category.ItemCategoryService/GetCategoryByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemCategoryServiceClient) UpsertCategoryInBatch(ctx context.Context, in *BatchUpsertCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/item.category.ItemCategoryService/UpsertCategoryInBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemCategoryServiceClient) FillOutCategoryPoint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/item.category.ItemCategoryService/FillOutCategoryPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemCategoryServiceServer is the server API for ItemCategoryService service.
// All implementations must embed UnimplementedItemCategoryServiceServer
// for forward compatibility
type ItemCategoryServiceServer interface {
	GetCategories(context.Context, *emptypb.Empty) (*CategoriesResponse, error)
	GetCategoryByCode(context.Context, *wrapperspb.StringValue) (*domain.ItemCategory, error)
	UpsertCategoryInBatch(context.Context, *BatchUpsertCategoryRequest) (*emptypb.Empty, error)
	FillOutCategoryPoint(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedItemCategoryServiceServer()
}

// UnimplementedItemCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemCategoryServiceServer struct {
}

func (UnimplementedItemCategoryServiceServer) GetCategories(context.Context, *emptypb.Empty) (*CategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedItemCategoryServiceServer) GetCategoryByCode(context.Context, *wrapperspb.StringValue) (*domain.ItemCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByCode not implemented")
}
func (UnimplementedItemCategoryServiceServer) UpsertCategoryInBatch(context.Context, *BatchUpsertCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCategoryInBatch not implemented")
}
func (UnimplementedItemCategoryServiceServer) FillOutCategoryPoint(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillOutCategoryPoint not implemented")
}
func (UnimplementedItemCategoryServiceServer) mustEmbedUnimplementedItemCategoryServiceServer() {}

// UnsafeItemCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemCategoryServiceServer will
// result in compilation errors.
type UnsafeItemCategoryServiceServer interface {
	mustEmbedUnimplementedItemCategoryServiceServer()
}

func RegisterItemCategoryServiceServer(s grpc.ServiceRegistrar, srv ItemCategoryServiceServer) {
	s.RegisterService(&ItemCategoryService_ServiceDesc, srv)
}

func _ItemCategoryService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCategoryServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.category.ItemCategoryService/GetCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCategoryServiceServer).GetCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemCategoryService_GetCategoryByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCategoryServiceServer).GetCategoryByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.category.ItemCategoryService/GetCategoryByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCategoryServiceServer).GetCategoryByCode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemCategoryService_UpsertCategoryInBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCategoryServiceServer).UpsertCategoryInBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.category.ItemCategoryService/UpsertCategoryInBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCategoryServiceServer).UpsertCategoryInBatch(ctx, req.(*BatchUpsertCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemCategoryService_FillOutCategoryPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCategoryServiceServer).FillOutCategoryPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.category.ItemCategoryService/FillOutCategoryPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCategoryServiceServer).FillOutCategoryPoint(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemCategoryService_ServiceDesc is the grpc.ServiceDesc for ItemCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.category.ItemCategoryService",
	HandlerType: (*ItemCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategories",
			Handler:    _ItemCategoryService_GetCategories_Handler,
		},
		{
			MethodName: "GetCategoryByCode",
			Handler:    _ItemCategoryService_GetCategoryByCode_Handler,
		},
		{
			MethodName: "UpsertCategoryInBatch",
			Handler:    _ItemCategoryService_UpsertCategoryInBatch_Handler,
		},
		{
			MethodName: "FillOutCategoryPoint",
			Handler:    _ItemCategoryService_FillOutCategoryPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_category.proto",
}
