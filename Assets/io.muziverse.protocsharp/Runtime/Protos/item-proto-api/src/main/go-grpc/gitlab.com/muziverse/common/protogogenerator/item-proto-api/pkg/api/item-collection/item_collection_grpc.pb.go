// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: item_collection.proto

package item_collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemCollectionServiceClient is the client API for ItemCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemCollectionServiceClient interface {
	GetAllCollections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCollectionResponse, error)
	GetCollectionByCodes(ctx context.Context, in *GetCollectionByCodesRequest, opts ...grpc.CallOption) (*ListCollectionResponse, error)
	UpsertCollectionInBatch(ctx context.Context, in *BatchUpsertCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type itemCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemCollectionServiceClient(cc grpc.ClientConnInterface) ItemCollectionServiceClient {
	return &itemCollectionServiceClient{cc}
}

func (c *itemCollectionServiceClient) GetAllCollections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCollectionResponse, error) {
	out := new(ListCollectionResponse)
	err := c.cc.Invoke(ctx, "/item.collection.ItemCollectionService/GetAllCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemCollectionServiceClient) GetCollectionByCodes(ctx context.Context, in *GetCollectionByCodesRequest, opts ...grpc.CallOption) (*ListCollectionResponse, error) {
	out := new(ListCollectionResponse)
	err := c.cc.Invoke(ctx, "/item.collection.ItemCollectionService/GetCollectionByCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemCollectionServiceClient) UpsertCollectionInBatch(ctx context.Context, in *BatchUpsertCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/item.collection.ItemCollectionService/UpsertCollectionInBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemCollectionServiceServer is the server API for ItemCollectionService service.
// All implementations must embed UnimplementedItemCollectionServiceServer
// for forward compatibility
type ItemCollectionServiceServer interface {
	GetAllCollections(context.Context, *emptypb.Empty) (*ListCollectionResponse, error)
	GetCollectionByCodes(context.Context, *GetCollectionByCodesRequest) (*ListCollectionResponse, error)
	UpsertCollectionInBatch(context.Context, *BatchUpsertCollectionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedItemCollectionServiceServer()
}

// UnimplementedItemCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemCollectionServiceServer struct {
}

func (UnimplementedItemCollectionServiceServer) GetAllCollections(context.Context, *emptypb.Empty) (*ListCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCollections not implemented")
}
func (UnimplementedItemCollectionServiceServer) GetCollectionByCodes(context.Context, *GetCollectionByCodesRequest) (*ListCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionByCodes not implemented")
}
func (UnimplementedItemCollectionServiceServer) UpsertCollectionInBatch(context.Context, *BatchUpsertCollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCollectionInBatch not implemented")
}
func (UnimplementedItemCollectionServiceServer) mustEmbedUnimplementedItemCollectionServiceServer() {}

// UnsafeItemCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemCollectionServiceServer will
// result in compilation errors.
type UnsafeItemCollectionServiceServer interface {
	mustEmbedUnimplementedItemCollectionServiceServer()
}

func RegisterItemCollectionServiceServer(s grpc.ServiceRegistrar, srv ItemCollectionServiceServer) {
	s.RegisterService(&ItemCollectionService_ServiceDesc, srv)
}

func _ItemCollectionService_GetAllCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCollectionServiceServer).GetAllCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.collection.ItemCollectionService/GetAllCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCollectionServiceServer).GetAllCollections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemCollectionService_GetCollectionByCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionByCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCollectionServiceServer).GetCollectionByCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.collection.ItemCollectionService/GetCollectionByCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCollectionServiceServer).GetCollectionByCodes(ctx, req.(*GetCollectionByCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemCollectionService_UpsertCollectionInBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemCollectionServiceServer).UpsertCollectionInBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.collection.ItemCollectionService/UpsertCollectionInBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemCollectionServiceServer).UpsertCollectionInBatch(ctx, req.(*BatchUpsertCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemCollectionService_ServiceDesc is the grpc.ServiceDesc for ItemCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.collection.ItemCollectionService",
	HandlerType: (*ItemCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCollections",
			Handler:    _ItemCollectionService_GetAllCollections_Handler,
		},
		{
			MethodName: "GetCollectionByCodes",
			Handler:    _ItemCollectionService_GetCollectionByCodes_Handler,
		},
		{
			MethodName: "UpsertCollectionInBatch",
			Handler:    _ItemCollectionService_UpsertCollectionInBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_collection.proto",
}
