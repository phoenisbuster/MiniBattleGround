// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: matchmaker_allocation.proto

package allocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchMakerAllocationServiceClient is the client API for MatchMakerAllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchMakerAllocationServiceClient interface {
	GetAllocation(ctx context.Context, in *MatchMakerAllocationRequest, opts ...grpc.CallOption) (*MatchMakerAllocationResponse, error)
	GetAllocatedGameServers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllocatedGameServersResponse, error)
	DeleteAllocatedGameServers(ctx context.Context, in *AllocatedGameServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matchMakerAllocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchMakerAllocationServiceClient(cc grpc.ClientConnInterface) MatchMakerAllocationServiceClient {
	return &matchMakerAllocationServiceClient{cc}
}

func (c *matchMakerAllocationServiceClient) GetAllocation(ctx context.Context, in *MatchMakerAllocationRequest, opts ...grpc.CallOption) (*MatchMakerAllocationResponse, error) {
	out := new(MatchMakerAllocationResponse)
	err := c.cc.Invoke(ctx, "/matchmaker.allocation.MatchMakerAllocationService/GetAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchMakerAllocationServiceClient) GetAllocatedGameServers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllocatedGameServersResponse, error) {
	out := new(AllocatedGameServersResponse)
	err := c.cc.Invoke(ctx, "/matchmaker.allocation.MatchMakerAllocationService/GetAllocatedGameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchMakerAllocationServiceClient) DeleteAllocatedGameServers(ctx context.Context, in *AllocatedGameServersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/matchmaker.allocation.MatchMakerAllocationService/DeleteAllocatedGameServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchMakerAllocationServiceServer is the server API for MatchMakerAllocationService service.
// All implementations must embed UnimplementedMatchMakerAllocationServiceServer
// for forward compatibility
type MatchMakerAllocationServiceServer interface {
	GetAllocation(context.Context, *MatchMakerAllocationRequest) (*MatchMakerAllocationResponse, error)
	GetAllocatedGameServers(context.Context, *emptypb.Empty) (*AllocatedGameServersResponse, error)
	DeleteAllocatedGameServers(context.Context, *AllocatedGameServersRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMatchMakerAllocationServiceServer()
}

// UnimplementedMatchMakerAllocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchMakerAllocationServiceServer struct {
}

func (UnimplementedMatchMakerAllocationServiceServer) GetAllocation(context.Context, *MatchMakerAllocationRequest) (*MatchMakerAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocation not implemented")
}
func (UnimplementedMatchMakerAllocationServiceServer) GetAllocatedGameServers(context.Context, *emptypb.Empty) (*AllocatedGameServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedGameServers not implemented")
}
func (UnimplementedMatchMakerAllocationServiceServer) DeleteAllocatedGameServers(context.Context, *AllocatedGameServersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocatedGameServers not implemented")
}
func (UnimplementedMatchMakerAllocationServiceServer) mustEmbedUnimplementedMatchMakerAllocationServiceServer() {
}

// UnsafeMatchMakerAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchMakerAllocationServiceServer will
// result in compilation errors.
type UnsafeMatchMakerAllocationServiceServer interface {
	mustEmbedUnimplementedMatchMakerAllocationServiceServer()
}

func RegisterMatchMakerAllocationServiceServer(s grpc.ServiceRegistrar, srv MatchMakerAllocationServiceServer) {
	s.RegisterService(&MatchMakerAllocationService_ServiceDesc, srv)
}

func _MatchMakerAllocationService_GetAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchMakerAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchMakerAllocationServiceServer).GetAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.allocation.MatchMakerAllocationService/GetAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchMakerAllocationServiceServer).GetAllocation(ctx, req.(*MatchMakerAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchMakerAllocationService_GetAllocatedGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchMakerAllocationServiceServer).GetAllocatedGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.allocation.MatchMakerAllocationService/GetAllocatedGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchMakerAllocationServiceServer).GetAllocatedGameServers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchMakerAllocationService_DeleteAllocatedGameServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocatedGameServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchMakerAllocationServiceServer).DeleteAllocatedGameServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.allocation.MatchMakerAllocationService/DeleteAllocatedGameServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchMakerAllocationServiceServer).DeleteAllocatedGameServers(ctx, req.(*AllocatedGameServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchMakerAllocationService_ServiceDesc is the grpc.ServiceDesc for MatchMakerAllocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchMakerAllocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaker.allocation.MatchMakerAllocationService",
	HandlerType: (*MatchMakerAllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllocation",
			Handler:    _MatchMakerAllocationService_GetAllocation_Handler,
		},
		{
			MethodName: "GetAllocatedGameServers",
			Handler:    _MatchMakerAllocationService_GetAllocatedGameServers_Handler,
		},
		{
			MethodName: "DeleteAllocatedGameServers",
			Handler:    _MatchMakerAllocationService_DeleteAllocatedGameServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaker_allocation.proto",
}
