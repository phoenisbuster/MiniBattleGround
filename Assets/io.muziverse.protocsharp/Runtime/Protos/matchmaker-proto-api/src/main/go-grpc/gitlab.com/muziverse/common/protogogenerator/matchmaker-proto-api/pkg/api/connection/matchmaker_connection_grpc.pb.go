// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: matchmaker_connection.proto

package connection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchMakerConnectionServiceClient is the client API for MatchMakerConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchMakerConnectionServiceClient interface {
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Disconnect(ctx context.Context, in *DisconnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matchMakerConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchMakerConnectionServiceClient(cc grpc.ClientConnInterface) MatchMakerConnectionServiceClient {
	return &matchMakerConnectionServiceClient{cc}
}

func (c *matchMakerConnectionServiceClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/matchmaker.connection.MatchMakerConnectionService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchMakerConnectionServiceClient) Disconnect(ctx context.Context, in *DisconnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/matchmaker.connection.MatchMakerConnectionService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchMakerConnectionServiceServer is the server API for MatchMakerConnectionService service.
// All implementations must embed UnimplementedMatchMakerConnectionServiceServer
// for forward compatibility
type MatchMakerConnectionServiceServer interface {
	Connect(context.Context, *ConnectionRequest) (*emptypb.Empty, error)
	Disconnect(context.Context, *DisconnectionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMatchMakerConnectionServiceServer()
}

// UnimplementedMatchMakerConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchMakerConnectionServiceServer struct {
}

func (UnimplementedMatchMakerConnectionServiceServer) Connect(context.Context, *ConnectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMatchMakerConnectionServiceServer) Disconnect(context.Context, *DisconnectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedMatchMakerConnectionServiceServer) mustEmbedUnimplementedMatchMakerConnectionServiceServer() {
}

// UnsafeMatchMakerConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchMakerConnectionServiceServer will
// result in compilation errors.
type UnsafeMatchMakerConnectionServiceServer interface {
	mustEmbedUnimplementedMatchMakerConnectionServiceServer()
}

func RegisterMatchMakerConnectionServiceServer(s grpc.ServiceRegistrar, srv MatchMakerConnectionServiceServer) {
	s.RegisterService(&MatchMakerConnectionService_ServiceDesc, srv)
}

func _MatchMakerConnectionService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchMakerConnectionServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.connection.MatchMakerConnectionService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchMakerConnectionServiceServer).Connect(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchMakerConnectionService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchMakerConnectionServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaker.connection.MatchMakerConnectionService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchMakerConnectionServiceServer).Disconnect(ctx, req.(*DisconnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchMakerConnectionService_ServiceDesc is the grpc.ServiceDesc for MatchMakerConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchMakerConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaker.connection.MatchMakerConnectionService",
	HandlerType: (*MatchMakerConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _MatchMakerConnectionService_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _MatchMakerConnectionService_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaker_connection.proto",
}
