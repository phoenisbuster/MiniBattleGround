// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: resource_server_info.proto

package serverinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerInfoClient is the client API for ServerInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerInfoClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataHandlingResponse, error)
	ServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServerInfo_ServerStreamClient, error)
}

type serverInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServerInfoClient(cc grpc.ClientConnInterface) ServerInfoClient {
	return &serverInfoClient{cc}
}

func (c *serverInfoClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DataHandlingResponse, error) {
	out := new(DataHandlingResponse)
	err := c.cc.Invoke(ctx, "/resource.serverinfo.ServerInfo/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverInfoClient) ServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServerInfo_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerInfo_ServiceDesc.Streams[0], "/resource.serverinfo.ServerInfo/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverInfoServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerInfo_ServerStreamClient interface {
	Recv() (*DataHandlingResponse, error)
	grpc.ClientStream
}

type serverInfoServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverInfoServerStreamClient) Recv() (*DataHandlingResponse, error) {
	m := new(DataHandlingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerInfoServer is the server API for ServerInfo service.
// All implementations must embed UnimplementedServerInfoServer
// for forward compatibility
type ServerInfoServer interface {
	Get(context.Context, *emptypb.Empty) (*DataHandlingResponse, error)
	ServerStream(*emptypb.Empty, ServerInfo_ServerStreamServer) error
	mustEmbedUnimplementedServerInfoServer()
}

// UnimplementedServerInfoServer must be embedded to have forward compatible implementations.
type UnimplementedServerInfoServer struct {
}

func (UnimplementedServerInfoServer) Get(context.Context, *emptypb.Empty) (*DataHandlingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedServerInfoServer) ServerStream(*emptypb.Empty, ServerInfo_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedServerInfoServer) mustEmbedUnimplementedServerInfoServer() {}

// UnsafeServerInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerInfoServer will
// result in compilation errors.
type UnsafeServerInfoServer interface {
	mustEmbedUnimplementedServerInfoServer()
}

func RegisterServerInfoServer(s grpc.ServiceRegistrar, srv ServerInfoServer) {
	s.RegisterService(&ServerInfo_ServiceDesc, srv)
}

func _ServerInfo_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerInfoServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.serverinfo.ServerInfo/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerInfoServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerInfo_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerInfoServer).ServerStream(m, &serverInfoServerStreamServer{stream})
}

type ServerInfo_ServerStreamServer interface {
	Send(*DataHandlingResponse) error
	grpc.ServerStream
}

type serverInfoServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverInfoServerStreamServer) Send(m *DataHandlingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerInfo_ServiceDesc is the grpc.ServiceDesc for ServerInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.serverinfo.ServerInfo",
	HandlerType: (*ServerInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ServerInfo_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ServerInfo_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resource_server_info.proto",
}
