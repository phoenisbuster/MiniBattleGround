// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: resource.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	CreateResourceAndUploadFile(ctx context.Context, in *CreateResourceAndUploadFileRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetResourcesByIds(ctx context.Context, in *GetResourcesByIdsRequest, opts ...grpc.CallOption) (*GetResourcesByIdsResponse, error)
	SearchResources(ctx context.Context, in *SearchResourceRequest, opts ...grpc.CallOption) (*SearchResourceResponse, error)
	ChangeStateResource(ctx context.Context, in *ChangeStateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceObsolete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBatchResource(ctx context.Context, in *CreateBatchResourceRequest, opts ...grpc.CallOption) (*CreateBatchResourceResponse, error)
	ClearResourceObsolete(ctx context.Context, in *ClearResourceObsoleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateResourceAndUploadFile(ctx context.Context, in *CreateResourceAndUploadFileRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/CreateResourceAndUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourcesByIds(ctx context.Context, in *GetResourcesByIdsRequest, opts ...grpc.CallOption) (*GetResourcesByIdsResponse, error) {
	out := new(GetResourcesByIdsResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/GetResourcesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SearchResources(ctx context.Context, in *SearchResourceRequest, opts ...grpc.CallOption) (*SearchResourceResponse, error) {
	out := new(SearchResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/SearchResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ChangeStateResource(ctx context.Context, in *ChangeStateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/ChangeStateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) DeleteResourceObsolete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/DeleteResourceObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateBatchResource(ctx context.Context, in *CreateBatchResourceRequest, opts ...grpc.CallOption) (*CreateBatchResourceResponse, error) {
	out := new(CreateBatchResourceResponse)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/CreateBatchResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ClearResourceObsolete(ctx context.Context, in *ClearResourceObsoleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/resource.resource.ResourceService/ClearResourceObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	CreateResource(context.Context, *CreateResourceRequest) (*ResourceResponse, error)
	CreateResourceAndUploadFile(context.Context, *CreateResourceAndUploadFileRequest) (*ResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetResourcesByIds(context.Context, *GetResourcesByIdsRequest) (*GetResourcesByIdsResponse, error)
	SearchResources(context.Context, *SearchResourceRequest) (*SearchResourceResponse, error)
	ChangeStateResource(context.Context, *ChangeStateResourceRequest) (*emptypb.Empty, error)
	DeleteResourceObsolete(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateBatchResource(context.Context, *CreateBatchResourceRequest) (*CreateBatchResourceResponse, error)
	ClearResourceObsolete(context.Context, *ClearResourceObsoleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedResourceServiceServer) CreateResourceAndUploadFile(context.Context, *CreateResourceAndUploadFileRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceAndUploadFile not implemented")
}
func (UnimplementedResourceServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResourcesByIds(context.Context, *GetResourcesByIdsRequest) (*GetResourcesByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesByIds not implemented")
}
func (UnimplementedResourceServiceServer) SearchResources(context.Context, *SearchResourceRequest) (*SearchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResources not implemented")
}
func (UnimplementedResourceServiceServer) ChangeStateResource(context.Context, *ChangeStateResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStateResource not implemented")
}
func (UnimplementedResourceServiceServer) DeleteResourceObsolete(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceObsolete not implemented")
}
func (UnimplementedResourceServiceServer) CreateBatchResource(context.Context, *CreateBatchResourceRequest) (*CreateBatchResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchResource not implemented")
}
func (UnimplementedResourceServiceServer) ClearResourceObsolete(context.Context, *ClearResourceObsoleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearResourceObsolete not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateResourceAndUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceAndUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResourceAndUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/CreateResourceAndUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResourceAndUploadFile(ctx, req.(*CreateResourceAndUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourcesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourcesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/GetResourcesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourcesByIds(ctx, req.(*GetResourcesByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SearchResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SearchResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/SearchResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SearchResources(ctx, req.(*SearchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ChangeStateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ChangeStateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/ChangeStateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ChangeStateResource(ctx, req.(*ChangeStateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_DeleteResourceObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).DeleteResourceObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/DeleteResourceObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).DeleteResourceObsolete(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateBatchResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateBatchResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/CreateBatchResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateBatchResource(ctx, req.(*CreateBatchResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ClearResourceObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearResourceObsoleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ClearResourceObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.resource.ResourceService/ClearResourceObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ClearResourceObsolete(ctx, req.(*ClearResourceObsoleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.resource.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _ResourceService_CreateResource_Handler,
		},
		{
			MethodName: "CreateResourceAndUploadFile",
			Handler:    _ResourceService_CreateResourceAndUploadFile_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ResourceService_DeleteResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceService_GetResource_Handler,
		},
		{
			MethodName: "GetResourcesByIds",
			Handler:    _ResourceService_GetResourcesByIds_Handler,
		},
		{
			MethodName: "SearchResources",
			Handler:    _ResourceService_SearchResources_Handler,
		},
		{
			MethodName: "ChangeStateResource",
			Handler:    _ResourceService_ChangeStateResource_Handler,
		},
		{
			MethodName: "DeleteResourceObsolete",
			Handler:    _ResourceService_DeleteResourceObsolete_Handler,
		},
		{
			MethodName: "CreateBatchResource",
			Handler:    _ResourceService_CreateBatchResource_Handler,
		},
		{
			MethodName: "ClearResourceObsolete",
			Handler:    _ResourceService_ClearResourceObsolete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}
