// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: resource_metadata.proto

package metadata

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/resource-proto-api/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	CreateMetadata(ctx context.Context, opts ...grpc.CallOption) (MetadataService_CreateMetadataClient, error)
	UpdateMetadata(ctx context.Context, opts ...grpc.CallOption) (MetadataService_UpdateMetadataClient, error)
	DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*domain.MetadataResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) CreateMetadata(ctx context.Context, opts ...grpc.CallOption) (MetadataService_CreateMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[0], "/resource.metadata.MetadataService/CreateMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataServiceCreateMetadataClient{stream}
	return x, nil
}

type MetadataService_CreateMetadataClient interface {
	Send(*CreateMetadataRequest) error
	CloseAndRecv() (*domain.MetadataResponse, error)
	grpc.ClientStream
}

type metadataServiceCreateMetadataClient struct {
	grpc.ClientStream
}

func (x *metadataServiceCreateMetadataClient) Send(m *CreateMetadataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataServiceCreateMetadataClient) CloseAndRecv() (*domain.MetadataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(domain.MetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataServiceClient) UpdateMetadata(ctx context.Context, opts ...grpc.CallOption) (MetadataService_UpdateMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetadataService_ServiceDesc.Streams[1], "/resource.metadata.MetadataService/UpdateMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataServiceUpdateMetadataClient{stream}
	return x, nil
}

type MetadataService_UpdateMetadataClient interface {
	Send(*UpdateMetadataRequest) error
	CloseAndRecv() (*domain.MetadataResponse, error)
	grpc.ClientStream
}

type metadataServiceUpdateMetadataClient struct {
	grpc.ClientStream
}

func (x *metadataServiceUpdateMetadataClient) Send(m *UpdateMetadataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataServiceUpdateMetadataClient) CloseAndRecv() (*domain.MetadataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(domain.MetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataServiceClient) DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/resource.metadata.MetadataService/DeleteMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*domain.MetadataResponse, error) {
	out := new(domain.MetadataResponse)
	err := c.cc.Invoke(ctx, "/resource.metadata.MetadataService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	CreateMetadata(MetadataService_CreateMetadataServer) error
	UpdateMetadata(MetadataService_UpdateMetadataServer) error
	DeleteMetadata(context.Context, *DeleteMetadataRequest) (*emptypb.Empty, error)
	GetMetadata(context.Context, *GetMetadataRequest) (*domain.MetadataResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) CreateMetadata(MetadataService_CreateMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) UpdateMetadata(MetadataService_UpdateMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) DeleteMetadata(context.Context, *DeleteMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) GetMetadata(context.Context, *GetMetadataRequest) (*domain.MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_CreateMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServiceServer).CreateMetadata(&metadataServiceCreateMetadataServer{stream})
}

type MetadataService_CreateMetadataServer interface {
	SendAndClose(*domain.MetadataResponse) error
	Recv() (*CreateMetadataRequest, error)
	grpc.ServerStream
}

type metadataServiceCreateMetadataServer struct {
	grpc.ServerStream
}

func (x *metadataServiceCreateMetadataServer) SendAndClose(m *domain.MetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataServiceCreateMetadataServer) Recv() (*CreateMetadataRequest, error) {
	m := new(CreateMetadataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetadataService_UpdateMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServiceServer).UpdateMetadata(&metadataServiceUpdateMetadataServer{stream})
}

type MetadataService_UpdateMetadataServer interface {
	SendAndClose(*domain.MetadataResponse) error
	Recv() (*UpdateMetadataRequest, error)
	grpc.ServerStream
}

type metadataServiceUpdateMetadataServer struct {
	grpc.ServerStream
}

func (x *metadataServiceUpdateMetadataServer) SendAndClose(m *domain.MetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataServiceUpdateMetadataServer) Recv() (*UpdateMetadataRequest, error) {
	m := new(UpdateMetadataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetadataService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.metadata.MetadataService/DeleteMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteMetadata(ctx, req.(*DeleteMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.metadata.MetadataService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.metadata.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMetadata",
			Handler:    _MetadataService_DeleteMetadata_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _MetadataService_GetMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMetadata",
			Handler:       _MetadataService_CreateMetadata_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateMetadata",
			Handler:       _MetadataService_UpdateMetadata_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "resource_metadata.proto",
}
