// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: user_friendship.proto

package useractivity

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	domain "gitlab.com/muziverse/common/protogogenerator/user-activity-proto-api/domain"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionChangeStatusFriendshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendshipId int64                       `protobuf:"varint,1,opt,name=friendship_id,json=friendshipId,proto3" json:"friendship_id,omitempty"`
	Action       domain.UserActionFriendship `protobuf:"varint,2,opt,name=action,proto3,enum=UserActionFriendship" json:"action,omitempty"`
}

func (x *ActionChangeStatusFriendshipRequest) Reset() {
	*x = ActionChangeStatusFriendshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionChangeStatusFriendshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionChangeStatusFriendshipRequest) ProtoMessage() {}

func (x *ActionChangeStatusFriendshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionChangeStatusFriendshipRequest.ProtoReflect.Descriptor instead.
func (*ActionChangeStatusFriendshipRequest) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{0}
}

func (x *ActionChangeStatusFriendshipRequest) GetFriendshipId() int64 {
	if x != nil {
		return x.FriendshipId
	}
	return 0
}

func (x *ActionChangeStatusFriendshipRequest) GetAction() domain.UserActionFriendship {
	if x != nil {
		return x.Action
	}
	return domain.UserActionFriendship(0)
}

type InvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*InvitationRequest_RelatedUserId
	//	*InvitationRequest_RelatedUserCode
	Request isInvitationRequest_Request `protobuf_oneof:"request"`
}

func (x *InvitationRequest) Reset() {
	*x = InvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationRequest) ProtoMessage() {}

func (x *InvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationRequest.ProtoReflect.Descriptor instead.
func (*InvitationRequest) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{1}
}

func (m *InvitationRequest) GetRequest() isInvitationRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *InvitationRequest) GetRelatedUserId() string {
	if x, ok := x.GetRequest().(*InvitationRequest_RelatedUserId); ok {
		return x.RelatedUserId
	}
	return ""
}

func (x *InvitationRequest) GetRelatedUserCode() int64 {
	if x, ok := x.GetRequest().(*InvitationRequest_RelatedUserCode); ok {
		return x.RelatedUserCode
	}
	return 0
}

type isInvitationRequest_Request interface {
	isInvitationRequest_Request()
}

type InvitationRequest_RelatedUserId struct {
	RelatedUserId string `protobuf:"bytes,1,opt,name=related_user_id,json=relatedUserId,proto3,oneof"`
}

type InvitationRequest_RelatedUserCode struct {
	RelatedUserCode int64 `protobuf:"varint,2,opt,name=related_user_code,json=relatedUserCode,proto3,oneof"`
}

func (*InvitationRequest_RelatedUserId) isInvitationRequest_Request() {}

func (*InvitationRequest_RelatedUserCode) isInvitationRequest_Request() {}

type ReplyInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendshipId   int64                       `protobuf:"varint,1,opt,name=friendship_id,json=friendshipId,proto3" json:"friendship_id,omitempty"`
	StatusResponse domain.UserFriendshipStatus `protobuf:"varint,2,opt,name=status_response,json=statusResponse,proto3,enum=UserFriendshipStatus" json:"status_response,omitempty"`
}

func (x *ReplyInvitationRequest) Reset() {
	*x = ReplyInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyInvitationRequest) ProtoMessage() {}

func (x *ReplyInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyInvitationRequest.ProtoReflect.Descriptor instead.
func (*ReplyInvitationRequest) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{2}
}

func (x *ReplyInvitationRequest) GetFriendshipId() int64 {
	if x != nil {
		return x.FriendshipId
	}
	return 0
}

func (x *ReplyInvitationRequest) GetStatusResponse() domain.UserFriendshipStatus {
	if x != nil {
		return x.StatusResponse
	}
	return domain.UserFriendshipStatus(0)
}

type RemoveFriendshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendshipId int64 `protobuf:"varint,1,opt,name=friendship_id,json=friendshipId,proto3" json:"friendship_id,omitempty"`
}

func (x *RemoveFriendshipRequest) Reset() {
	*x = RemoveFriendshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFriendshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFriendshipRequest) ProtoMessage() {}

func (x *RemoveFriendshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFriendshipRequest.ProtoReflect.Descriptor instead.
func (*RemoveFriendshipRequest) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveFriendshipRequest) GetFriendshipId() int64 {
	if x != nil {
		return x.FriendshipId
	}
	return 0
}

type FriendShipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendshipId int64                  `protobuf:"varint,1,opt,name=friendship_id,json=friendshipId,proto3" json:"friendship_id,omitempty"`
	UserInfo     *UserInfo              `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RequesterId  string                 `protobuf:"bytes,5,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
}

func (x *FriendShipData) Reset() {
	*x = FriendShipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendShipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendShipData) ProtoMessage() {}

func (x *FriendShipData) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendShipData.ProtoReflect.Descriptor instead.
func (*FriendShipData) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{4}
}

func (x *FriendShipData) GetFriendshipId() int64 {
	if x != nil {
		return x.FriendshipId
	}
	return 0
}

func (x *FriendShipData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *FriendShipData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FriendShipData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FriendShipData) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type ListFriendshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendList        []*FriendShipData `protobuf:"bytes,1,rep,name=friend_list,json=friendList,proto3" json:"friend_list,omitempty"`
	BlockFriendList   []*FriendShipData `protobuf:"bytes,2,rep,name=block_friend_list,json=blockFriendList,proto3" json:"block_friend_list,omitempty"`
	RequestFriendList []*FriendShipData `protobuf:"bytes,3,rep,name=request_friend_list,json=requestFriendList,proto3" json:"request_friend_list,omitempty"`
}

func (x *ListFriendshipResponse) Reset() {
	*x = ListFriendshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFriendshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFriendshipResponse) ProtoMessage() {}

func (x *ListFriendshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFriendshipResponse.ProtoReflect.Descriptor instead.
func (*ListFriendshipResponse) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{5}
}

func (x *ListFriendshipResponse) GetFriendList() []*FriendShipData {
	if x != nil {
		return x.FriendList
	}
	return nil
}

func (x *ListFriendshipResponse) GetBlockFriendList() []*FriendShipData {
	if x != nil {
		return x.BlockFriendList
	}
	return nil
}

func (x *ListFriendshipResponse) GetRequestFriendList() []*FriendShipData {
	if x != nil {
		return x.RequestFriendList
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DisplayName string            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Email       string            `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	ImageUrl    string            `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Address     string            `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Status      domain.UserStatus `protobuf:"varint,6,opt,name=status,proto3,enum=UserStatus" json:"status,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_friendship_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_friendship_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_user_friendship_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *UserInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserInfo) GetStatus() domain.UserStatus {
	if x != nil {
		return x.Status
	}
	return domain.UserStatus(0)
}

var File_user_friendship_proto protoreflect.FileDescriptor

var file_user_friendship_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x1a, 0x23, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x23, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x0e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0x7d, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x64, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x8f, 0x04, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x12, 0x34, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x12, 0x40, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0xa5, 0x01, 0x0a, 0x2e, 0x69, 0x6f, 0x2e, 0x6d, 0x75, 0x7a, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x70, 0x42, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x75, 0x7a, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_user_friendship_proto_rawDescOnce sync.Once
	file_user_friendship_proto_rawDescData = file_user_friendship_proto_rawDesc
)

func file_user_friendship_proto_rawDescGZIP() []byte {
	file_user_friendship_proto_rawDescOnce.Do(func() {
		file_user_friendship_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_friendship_proto_rawDescData)
	})
	return file_user_friendship_proto_rawDescData
}

var file_user_friendship_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_user_friendship_proto_goTypes = []interface{}{
	(*ActionChangeStatusFriendshipRequest)(nil), // 0: useractivity.userfriendship.ActionChangeStatusFriendshipRequest
	(*InvitationRequest)(nil),                   // 1: useractivity.userfriendship.InvitationRequest
	(*ReplyInvitationRequest)(nil),              // 2: useractivity.userfriendship.ReplyInvitationRequest
	(*RemoveFriendshipRequest)(nil),             // 3: useractivity.userfriendship.RemoveFriendshipRequest
	(*FriendShipData)(nil),                      // 4: useractivity.userfriendship.FriendShipData
	(*ListFriendshipResponse)(nil),              // 5: useractivity.userfriendship.ListFriendshipResponse
	(*UserInfo)(nil),                            // 6: useractivity.userfriendship.UserInfo
	(domain.UserActionFriendship)(0),            // 7: UserActionFriendship
	(domain.UserFriendshipStatus)(0),            // 8: UserFriendshipStatus
	(*timestamppb.Timestamp)(nil),               // 9: google.protobuf.Timestamp
	(domain.UserStatus)(0),                      // 10: UserStatus
	(*emptypb.Empty)(nil),                       // 11: google.protobuf.Empty
}
var file_user_friendship_proto_depIdxs = []int32{
	7,  // 0: useractivity.userfriendship.ActionChangeStatusFriendshipRequest.action:type_name -> UserActionFriendship
	8,  // 1: useractivity.userfriendship.ReplyInvitationRequest.status_response:type_name -> UserFriendshipStatus
	6,  // 2: useractivity.userfriendship.FriendShipData.user_info:type_name -> useractivity.userfriendship.UserInfo
	9,  // 3: useractivity.userfriendship.FriendShipData.created_at:type_name -> google.protobuf.Timestamp
	9,  // 4: useractivity.userfriendship.FriendShipData.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 5: useractivity.userfriendship.ListFriendshipResponse.friend_list:type_name -> useractivity.userfriendship.FriendShipData
	4,  // 6: useractivity.userfriendship.ListFriendshipResponse.block_friend_list:type_name -> useractivity.userfriendship.FriendShipData
	4,  // 7: useractivity.userfriendship.ListFriendshipResponse.request_friend_list:type_name -> useractivity.userfriendship.FriendShipData
	10, // 8: useractivity.userfriendship.UserInfo.status:type_name -> UserStatus
	1,  // 9: useractivity.userfriendship.UserFriendshipService.SendInvitation:input_type -> useractivity.userfriendship.InvitationRequest
	2,  // 10: useractivity.userfriendship.UserFriendshipService.ReplyInvitation:input_type -> useractivity.userfriendship.ReplyInvitationRequest
	3,  // 11: useractivity.userfriendship.UserFriendshipService.RemoveFriendship:input_type -> useractivity.userfriendship.RemoveFriendshipRequest
	11, // 12: useractivity.userfriendship.UserFriendshipService.GetListFriendship:input_type -> google.protobuf.Empty
	0,  // 13: useractivity.userfriendship.UserFriendshipService.ActionChangeStatusFriendship:input_type -> useractivity.userfriendship.ActionChangeStatusFriendshipRequest
	11, // 14: useractivity.userfriendship.UserFriendshipService.SendInvitation:output_type -> google.protobuf.Empty
	11, // 15: useractivity.userfriendship.UserFriendshipService.ReplyInvitation:output_type -> google.protobuf.Empty
	11, // 16: useractivity.userfriendship.UserFriendshipService.RemoveFriendship:output_type -> google.protobuf.Empty
	5,  // 17: useractivity.userfriendship.UserFriendshipService.GetListFriendship:output_type -> useractivity.userfriendship.ListFriendshipResponse
	11, // 18: useractivity.userfriendship.UserFriendshipService.ActionChangeStatusFriendship:output_type -> google.protobuf.Empty
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_user_friendship_proto_init() }
func file_user_friendship_proto_init() {
	if File_user_friendship_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_friendship_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionChangeStatusFriendshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFriendshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendShipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFriendshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_friendship_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_friendship_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InvitationRequest_RelatedUserId)(nil),
		(*InvitationRequest_RelatedUserCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_friendship_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_friendship_proto_goTypes,
		DependencyIndexes: file_user_friendship_proto_depIdxs,
		MessageInfos:      file_user_friendship_proto_msgTypes,
	}.Build()
	File_user_friendship_proto = out.File
	file_user_friendship_proto_rawDesc = nil
	file_user_friendship_proto_goTypes = nil
	file_user_friendship_proto_depIdxs = nil
}
