// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: user_inventory.proto

package inventory

import (
	domain1 "gitlab.com/muziverse/common/protogogenerator/common-proto-api/pkg/domain"
	paging "gitlab.com/muziverse/common/protogogenerator/common-proto-api/pkg/paging"
	domain "gitlab.com/muziverse/common/protogogenerator/item-proto-api/pkg/domain"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InventoryItemType int32

const (
	InventoryItemType_NON_NFT InventoryItemType = 0
	InventoryItemType_NFT     InventoryItemType = 1
)

// Enum value maps for InventoryItemType.
var (
	InventoryItemType_name = map[int32]string{
		0: "NON_NFT",
		1: "NFT",
	}
	InventoryItemType_value = map[string]int32{
		"NON_NFT": 0,
		"NFT":     1,
	}
)

func (x InventoryItemType) Enum() *InventoryItemType {
	p := new(InventoryItemType)
	*p = x
	return p
}

func (x InventoryItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_inventory_proto_enumTypes[0].Descriptor()
}

func (InventoryItemType) Type() protoreflect.EnumType {
	return &file_user_inventory_proto_enumTypes[0]
}

func (x InventoryItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryItemType.Descriptor instead.
func (InventoryItemType) EnumDescriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{0}
}

type UserInventoryFilterRequest_UserInventorySort int32

const (
	UserInventoryFilterRequest_NEWEST                  UserInventoryFilterRequest_UserInventorySort = 0
	UserInventoryFilterRequest_ALPHABETICAL_ASCENDING  UserInventoryFilterRequest_UserInventorySort = 1
	UserInventoryFilterRequest_ALPHABETICAL_DESCENDING UserInventoryFilterRequest_UserInventorySort = 2
)

// Enum value maps for UserInventoryFilterRequest_UserInventorySort.
var (
	UserInventoryFilterRequest_UserInventorySort_name = map[int32]string{
		0: "NEWEST",
		1: "ALPHABETICAL_ASCENDING",
		2: "ALPHABETICAL_DESCENDING",
	}
	UserInventoryFilterRequest_UserInventorySort_value = map[string]int32{
		"NEWEST":                  0,
		"ALPHABETICAL_ASCENDING":  1,
		"ALPHABETICAL_DESCENDING": 2,
	}
)

func (x UserInventoryFilterRequest_UserInventorySort) Enum() *UserInventoryFilterRequest_UserInventorySort {
	p := new(UserInventoryFilterRequest_UserInventorySort)
	*p = x
	return p
}

func (x UserInventoryFilterRequest_UserInventorySort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInventoryFilterRequest_UserInventorySort) Descriptor() protoreflect.EnumDescriptor {
	return file_user_inventory_proto_enumTypes[1].Descriptor()
}

func (UserInventoryFilterRequest_UserInventorySort) Type() protoreflect.EnumType {
	return &file_user_inventory_proto_enumTypes[1]
}

func (x UserInventoryFilterRequest_UserInventorySort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInventoryFilterRequest_UserInventorySort.Descriptor instead.
func (UserInventoryFilterRequest_UserInventorySort) EnumDescriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{5, 0}
}

type ListItemCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection []*domain.ItemCollection `protobuf:"bytes,1,rep,name=collection,proto3" json:"collection,omitempty"`
}

func (x *ListItemCollectionResponse) Reset() {
	*x = ListItemCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListItemCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListItemCollectionResponse) ProtoMessage() {}

func (x *ListItemCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListItemCollectionResponse.ProtoReflect.Descriptor instead.
func (*ListItemCollectionResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *ListItemCollectionResponse) GetCollection() []*domain.ItemCollection {
	if x != nil {
		return x.Collection
	}
	return nil
}

type GetAllItemByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItemId        []int64                    `protobuf:"varint,1,rep,packed,name=inventory_item_id,json=inventoryItemId,proto3" json:"inventory_item_id,omitempty"`
	ItemDataFetchDirective *domain.ItemFetchDirective `protobuf:"bytes,2,opt,name=item_data_fetch_directive,json=itemDataFetchDirective,proto3" json:"item_data_fetch_directive,omitempty"`
	NeedToCheckOwnership   bool                       `protobuf:"varint,3,opt,name=need_to_check_ownership,json=needToCheckOwnership,proto3" json:"need_to_check_ownership,omitempty"`
}

func (x *GetAllItemByIdsRequest) Reset() {
	*x = GetAllItemByIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllItemByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllItemByIdsRequest) ProtoMessage() {}

func (x *GetAllItemByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllItemByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAllItemByIdsRequest) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllItemByIdsRequest) GetInventoryItemId() []int64 {
	if x != nil {
		return x.InventoryItemId
	}
	return nil
}

func (x *GetAllItemByIdsRequest) GetItemDataFetchDirective() *domain.ItemFetchDirective {
	if x != nil {
		return x.ItemDataFetchDirective
	}
	return nil
}

func (x *GetAllItemByIdsRequest) GetNeedToCheckOwnership() bool {
	if x != nil {
		return x.NeedToCheckOwnership
	}
	return false
}

type EstablishInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewItem                     map[string]*EstablishInventoryRequest_InventoryItemRequest `protobuf:"bytes,1,rep,name=new_item,json=newItem,proto3" json:"new_item,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                 // key is external id
	ModifiedItem                map[int64]*EstablishInventoryRequest_InventoryItemRequest  `protobuf:"bytes,2,rep,name=modified_item,json=modifiedItem,proto3" json:"modified_item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key is inventory item id
	DeletedItem                 []int64                                                    `protobuf:"varint,3,rep,packed,name=deleted_item,json=deletedItem,proto3" json:"deleted_item,omitempty"`
	IsAutoEstablishDefaultItems bool                                                       `protobuf:"varint,4,opt,name=is_auto_establish_default_items,json=isAutoEstablishDefaultItems,proto3" json:"is_auto_establish_default_items,omitempty"`
}

func (x *EstablishInventoryRequest) Reset() {
	*x = EstablishInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishInventoryRequest) ProtoMessage() {}

func (x *EstablishInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishInventoryRequest.ProtoReflect.Descriptor instead.
func (*EstablishInventoryRequest) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *EstablishInventoryRequest) GetNewItem() map[string]*EstablishInventoryRequest_InventoryItemRequest {
	if x != nil {
		return x.NewItem
	}
	return nil
}

func (x *EstablishInventoryRequest) GetModifiedItem() map[int64]*EstablishInventoryRequest_InventoryItemRequest {
	if x != nil {
		return x.ModifiedItem
	}
	return nil
}

func (x *EstablishInventoryRequest) GetDeletedItem() []int64 {
	if x != nil {
		return x.DeletedItem
	}
	return nil
}

func (x *EstablishInventoryRequest) GetIsAutoEstablishDefaultItems() bool {
	if x != nil {
		return x.IsAutoEstablishDefaultItems
	}
	return false
}

type EstablishInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewItem      []*EstablishInventoryItemResponse `protobuf:"bytes,1,rep,name=new_item,json=newItem,proto3" json:"new_item,omitempty"`
	ModifiedItem []*EstablishInventoryItemResponse `protobuf:"bytes,2,rep,name=modified_item,json=modifiedItem,proto3" json:"modified_item,omitempty"`
}

func (x *EstablishInventoryResponse) Reset() {
	*x = EstablishInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishInventoryResponse) ProtoMessage() {}

func (x *EstablishInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishInventoryResponse.ProtoReflect.Descriptor instead.
func (*EstablishInventoryResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *EstablishInventoryResponse) GetNewItem() []*EstablishInventoryItemResponse {
	if x != nil {
		return x.NewItem
	}
	return nil
}

func (x *EstablishInventoryResponse) GetModifiedItem() []*EstablishInventoryItemResponse {
	if x != nil {
		return x.ModifiedItem
	}
	return nil
}

type EstablishInventoryItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItemId   int64             `protobuf:"varint,1,opt,name=inventory_item_id,json=inventoryItemId,proto3" json:"inventory_item_id,omitempty"`
	ItemExternalId    string            `protobuf:"bytes,2,opt,name=item_external_id,json=itemExternalId,proto3" json:"item_external_id,omitempty"`
	InventoryItemType InventoryItemType `protobuf:"varint,3,opt,name=inventory_item_type,json=inventoryItemType,proto3,enum=useractivity.inventory.InventoryItemType" json:"inventory_item_type,omitempty"`
	IsEquipped        bool              `protobuf:"varint,4,opt,name=is_equipped,json=isEquipped,proto3" json:"is_equipped,omitempty"`
}

func (x *EstablishInventoryItemResponse) Reset() {
	*x = EstablishInventoryItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishInventoryItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishInventoryItemResponse) ProtoMessage() {}

func (x *EstablishInventoryItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishInventoryItemResponse.ProtoReflect.Descriptor instead.
func (*EstablishInventoryItemResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *EstablishInventoryItemResponse) GetInventoryItemId() int64 {
	if x != nil {
		return x.InventoryItemId
	}
	return 0
}

func (x *EstablishInventoryItemResponse) GetItemExternalId() string {
	if x != nil {
		return x.ItemExternalId
	}
	return ""
}

func (x *EstablishInventoryItemResponse) GetInventoryItemType() InventoryItemType {
	if x != nil {
		return x.InventoryItemType
	}
	return InventoryItemType_NON_NFT
}

func (x *EstablishInventoryItemResponse) GetIsEquipped() bool {
	if x != nil {
		return x.IsEquipped
	}
	return false
}

type UserInventoryFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CategoryQueries:
	//	*UserInventoryFilterRequest_ParentCategoryCode
	//	*UserInventoryFilterRequest_CategoryCode
	CategoryQueries        isUserInventoryFilterRequest_CategoryQueries `protobuf_oneof:"category_queries"`
	ItemDataFetchDirective *domain.ItemFetchDirective                   `protobuf:"bytes,3,opt,name=item_data_fetch_directive,json=itemDataFetchDirective,proto3" json:"item_data_fetch_directive,omitempty"`
	Pageable               *paging.Pageable                             `protobuf:"bytes,4,opt,name=pageable,proto3" json:"pageable,omitempty"`
	Sort                   UserInventoryFilterRequest_UserInventorySort `protobuf:"varint,5,opt,name=sort,proto3,enum=useractivity.inventory.UserInventoryFilterRequest_UserInventorySort" json:"sort,omitempty"`
	Tags                   []string                                     `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Properties             map[string]string                            `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CollectionCode         string                                       `protobuf:"bytes,8,opt,name=collection_code,json=collectionCode,proto3" json:"collection_code,omitempty"`
}

func (x *UserInventoryFilterRequest) Reset() {
	*x = UserInventoryFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventoryFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventoryFilterRequest) ProtoMessage() {}

func (x *UserInventoryFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventoryFilterRequest.ProtoReflect.Descriptor instead.
func (*UserInventoryFilterRequest) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{5}
}

func (m *UserInventoryFilterRequest) GetCategoryQueries() isUserInventoryFilterRequest_CategoryQueries {
	if m != nil {
		return m.CategoryQueries
	}
	return nil
}

func (x *UserInventoryFilterRequest) GetParentCategoryCode() string {
	if x, ok := x.GetCategoryQueries().(*UserInventoryFilterRequest_ParentCategoryCode); ok {
		return x.ParentCategoryCode
	}
	return ""
}

func (x *UserInventoryFilterRequest) GetCategoryCode() string {
	if x, ok := x.GetCategoryQueries().(*UserInventoryFilterRequest_CategoryCode); ok {
		return x.CategoryCode
	}
	return ""
}

func (x *UserInventoryFilterRequest) GetItemDataFetchDirective() *domain.ItemFetchDirective {
	if x != nil {
		return x.ItemDataFetchDirective
	}
	return nil
}

func (x *UserInventoryFilterRequest) GetPageable() *paging.Pageable {
	if x != nil {
		return x.Pageable
	}
	return nil
}

func (x *UserInventoryFilterRequest) GetSort() UserInventoryFilterRequest_UserInventorySort {
	if x != nil {
		return x.Sort
	}
	return UserInventoryFilterRequest_NEWEST
}

func (x *UserInventoryFilterRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserInventoryFilterRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UserInventoryFilterRequest) GetCollectionCode() string {
	if x != nil {
		return x.CollectionCode
	}
	return ""
}

type isUserInventoryFilterRequest_CategoryQueries interface {
	isUserInventoryFilterRequest_CategoryQueries()
}

type UserInventoryFilterRequest_ParentCategoryCode struct {
	ParentCategoryCode string `protobuf:"bytes,1,opt,name=parent_category_code,json=parentCategoryCode,proto3,oneof"`
}

type UserInventoryFilterRequest_CategoryCode struct {
	CategoryCode string `protobuf:"bytes,2,opt,name=category_code,json=categoryCode,proto3,oneof"`
}

func (*UserInventoryFilterRequest_ParentCategoryCode) isUserInventoryFilterRequest_CategoryQueries() {
}

func (*UserInventoryFilterRequest_CategoryCode) isUserInventoryFilterRequest_CategoryQueries() {}

type UserInventoryFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalItems int64                    `protobuf:"varint,1,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`
	Pageable   *paging.Pageable         `protobuf:"bytes,2,opt,name=pageable,proto3" json:"pageable,omitempty"`
	Data       []*InventoryItemResponse `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserInventoryFilterResponse) Reset() {
	*x = UserInventoryFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventoryFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventoryFilterResponse) ProtoMessage() {}

func (x *UserInventoryFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventoryFilterResponse.ProtoReflect.Descriptor instead.
func (*UserInventoryFilterResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *UserInventoryFilterResponse) GetTotalItems() int64 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

func (x *UserInventoryFilterResponse) GetPageable() *paging.Pageable {
	if x != nil {
		return x.Pageable
	}
	return nil
}

func (x *UserInventoryFilterResponse) GetData() []*InventoryItemResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListInventoryItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItem []*InventoryItemResponse `protobuf:"bytes,1,rep,name=inventory_item,json=inventoryItem,proto3" json:"inventory_item,omitempty"`
}

func (x *ListInventoryItemResponse) Reset() {
	*x = ListInventoryItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryItemResponse) ProtoMessage() {}

func (x *ListInventoryItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryItemResponse.ProtoReflect.Descriptor instead.
func (*ListInventoryItemResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *ListInventoryItemResponse) GetInventoryItem() []*InventoryItemResponse {
	if x != nil {
		return x.InventoryItem
	}
	return nil
}

type InventoryItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItemId        int64             `protobuf:"varint,1,opt,name=inventory_item_id,json=inventoryItemId,proto3" json:"inventory_item_id,omitempty"`
	ItemExternalId         string            `protobuf:"bytes,2,opt,name=item_external_id,json=itemExternalId,proto3" json:"item_external_id,omitempty"`
	InventoryItemType      InventoryItemType `protobuf:"varint,3,opt,name=inventory_item_type,json=inventoryItemType,proto3,enum=useractivity.inventory.InventoryItemType" json:"inventory_item_type,omitempty"`
	ItemCategoryCode       string            `protobuf:"bytes,4,opt,name=item_category_code,json=itemCategoryCode,proto3" json:"item_category_code,omitempty"`
	ItemParentCategoryCode string            `protobuf:"bytes,5,opt,name=item_parent_category_code,json=itemParentCategoryCode,proto3" json:"item_parent_category_code,omitempty"`
	IsEquipped             bool              `protobuf:"varint,6,opt,name=is_equipped,json=isEquipped,proto3" json:"is_equipped,omitempty"`
	ItemData               *domain.Item      `protobuf:"bytes,7,opt,name=item_data,json=itemData,proto3" json:"item_data,omitempty"`
	Customization          *structpb.Struct  `protobuf:"bytes,8,opt,name=customization,proto3" json:"customization,omitempty"`
	Amount                 int64             `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Rarity                 domain1.Rarity    `protobuf:"varint,10,opt,name=rarity,proto3,enum=Rarity" json:"rarity,omitempty"`
	ItemName               string            `protobuf:"bytes,11,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemCollectionCode     string            `protobuf:"bytes,12,opt,name=item_collection_code,json=itemCollectionCode,proto3" json:"item_collection_code,omitempty"`
}

func (x *InventoryItemResponse) Reset() {
	*x = InventoryItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItemResponse) ProtoMessage() {}

func (x *InventoryItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItemResponse.ProtoReflect.Descriptor instead.
func (*InventoryItemResponse) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *InventoryItemResponse) GetInventoryItemId() int64 {
	if x != nil {
		return x.InventoryItemId
	}
	return 0
}

func (x *InventoryItemResponse) GetItemExternalId() string {
	if x != nil {
		return x.ItemExternalId
	}
	return ""
}

func (x *InventoryItemResponse) GetInventoryItemType() InventoryItemType {
	if x != nil {
		return x.InventoryItemType
	}
	return InventoryItemType_NON_NFT
}

func (x *InventoryItemResponse) GetItemCategoryCode() string {
	if x != nil {
		return x.ItemCategoryCode
	}
	return ""
}

func (x *InventoryItemResponse) GetItemParentCategoryCode() string {
	if x != nil {
		return x.ItemParentCategoryCode
	}
	return ""
}

func (x *InventoryItemResponse) GetIsEquipped() bool {
	if x != nil {
		return x.IsEquipped
	}
	return false
}

func (x *InventoryItemResponse) GetItemData() *domain.Item {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *InventoryItemResponse) GetCustomization() *structpb.Struct {
	if x != nil {
		return x.Customization
	}
	return nil
}

func (x *InventoryItemResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InventoryItemResponse) GetRarity() domain1.Rarity {
	if x != nil {
		return x.Rarity
	}
	return domain1.Rarity(0)
}

func (x *InventoryItemResponse) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *InventoryItemResponse) GetItemCollectionCode() string {
	if x != nil {
		return x.ItemCollectionCode
	}
	return ""
}

type EstablishInventoryRequest_InventoryItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEquipped        bool              `protobuf:"varint,1,opt,name=is_equipped,json=isEquipped,proto3" json:"is_equipped,omitempty"`
	InventoryItemType InventoryItemType `protobuf:"varint,2,opt,name=inventory_item_type,json=inventoryItemType,proto3,enum=useractivity.inventory.InventoryItemType" json:"inventory_item_type,omitempty"`
	Customization     *structpb.Struct  `protobuf:"bytes,3,opt,name=customization,proto3" json:"customization,omitempty"`
}

func (x *EstablishInventoryRequest_InventoryItemRequest) Reset() {
	*x = EstablishInventoryRequest_InventoryItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishInventoryRequest_InventoryItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishInventoryRequest_InventoryItemRequest) ProtoMessage() {}

func (x *EstablishInventoryRequest_InventoryItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishInventoryRequest_InventoryItemRequest.ProtoReflect.Descriptor instead.
func (*EstablishInventoryRequest_InventoryItemRequest) Descriptor() ([]byte, []int) {
	return file_user_inventory_proto_rawDescGZIP(), []int{2, 2}
}

func (x *EstablishInventoryRequest_InventoryItemRequest) GetIsEquipped() bool {
	if x != nil {
		return x.IsEquipped
	}
	return false
}

func (x *EstablishInventoryRequest_InventoryItemRequest) GetInventoryItemType() InventoryItemType {
	if x != nil {
		return x.InventoryItemType
	}
	return InventoryItemType_NON_NFT
}

func (x *EstablishInventoryRequest_InventoryItemRequest) GetCustomization() *structpb.Struct {
	if x != nil {
		return x.Customization
	}
	return nil
}

var File_user_inventory_proto protoreflect.FileDescriptor

var file_user_inventory_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x19,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e,
	0x65, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x22, 0xac, 0x06, 0x0a, 0x19, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x68, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a,
	0x82, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd1,
	0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x22, 0xf2, 0x01, 0x0a, 0x1e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x13, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x9d, 0x05, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x42, 0x45, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xbd, 0x04, 0x0a, 0x15,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x13, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x52, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x29, 0x0a, 0x11, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e, 0x46, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x46, 0x54, 0x10, 0x01, 0x32, 0xdc, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7b, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x2e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xcd, 0x01, 0x0a, 0x2d, 0x69, 0x6f, 0x2e, 0x6d, 0x75, 0x7a,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x75, 0x7a, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0xaa, 0x02, 0x26, 0x4d,
	0x75, 0x7a, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_inventory_proto_rawDescOnce sync.Once
	file_user_inventory_proto_rawDescData = file_user_inventory_proto_rawDesc
)

func file_user_inventory_proto_rawDescGZIP() []byte {
	file_user_inventory_proto_rawDescOnce.Do(func() {
		file_user_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_inventory_proto_rawDescData)
	})
	return file_user_inventory_proto_rawDescData
}

var file_user_inventory_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_user_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_user_inventory_proto_goTypes = []interface{}{
	(InventoryItemType)(0),                                 // 0: useractivity.inventory.InventoryItemType
	(UserInventoryFilterRequest_UserInventorySort)(0),      // 1: useractivity.inventory.UserInventoryFilterRequest.UserInventorySort
	(*ListItemCollectionResponse)(nil),                     // 2: useractivity.inventory.ListItemCollectionResponse
	(*GetAllItemByIdsRequest)(nil),                         // 3: useractivity.inventory.GetAllItemByIdsRequest
	(*EstablishInventoryRequest)(nil),                      // 4: useractivity.inventory.EstablishInventoryRequest
	(*EstablishInventoryResponse)(nil),                     // 5: useractivity.inventory.EstablishInventoryResponse
	(*EstablishInventoryItemResponse)(nil),                 // 6: useractivity.inventory.EstablishInventoryItemResponse
	(*UserInventoryFilterRequest)(nil),                     // 7: useractivity.inventory.UserInventoryFilterRequest
	(*UserInventoryFilterResponse)(nil),                    // 8: useractivity.inventory.UserInventoryFilterResponse
	(*ListInventoryItemResponse)(nil),                      // 9: useractivity.inventory.ListInventoryItemResponse
	(*InventoryItemResponse)(nil),                          // 10: useractivity.inventory.InventoryItemResponse
	nil,                                                    // 11: useractivity.inventory.EstablishInventoryRequest.NewItemEntry
	nil,                                                    // 12: useractivity.inventory.EstablishInventoryRequest.ModifiedItemEntry
	(*EstablishInventoryRequest_InventoryItemRequest)(nil), // 13: useractivity.inventory.EstablishInventoryRequest.InventoryItemRequest
	nil,                               // 14: useractivity.inventory.UserInventoryFilterRequest.PropertiesEntry
	(*domain.ItemCollection)(nil),     // 15: ItemCollection
	(*domain.ItemFetchDirective)(nil), // 16: ItemFetchDirective
	(*paging.Pageable)(nil),           // 17: common.Pageable
	(*domain.Item)(nil),               // 18: Item
	(*structpb.Struct)(nil),           // 19: google.protobuf.Struct
	(domain1.Rarity)(0),               // 20: Rarity
	(*emptypb.Empty)(nil),             // 21: google.protobuf.Empty
}
var file_user_inventory_proto_depIdxs = []int32{
	15, // 0: useractivity.inventory.ListItemCollectionResponse.collection:type_name -> ItemCollection
	16, // 1: useractivity.inventory.GetAllItemByIdsRequest.item_data_fetch_directive:type_name -> ItemFetchDirective
	11, // 2: useractivity.inventory.EstablishInventoryRequest.new_item:type_name -> useractivity.inventory.EstablishInventoryRequest.NewItemEntry
	12, // 3: useractivity.inventory.EstablishInventoryRequest.modified_item:type_name -> useractivity.inventory.EstablishInventoryRequest.ModifiedItemEntry
	6,  // 4: useractivity.inventory.EstablishInventoryResponse.new_item:type_name -> useractivity.inventory.EstablishInventoryItemResponse
	6,  // 5: useractivity.inventory.EstablishInventoryResponse.modified_item:type_name -> useractivity.inventory.EstablishInventoryItemResponse
	0,  // 6: useractivity.inventory.EstablishInventoryItemResponse.inventory_item_type:type_name -> useractivity.inventory.InventoryItemType
	16, // 7: useractivity.inventory.UserInventoryFilterRequest.item_data_fetch_directive:type_name -> ItemFetchDirective
	17, // 8: useractivity.inventory.UserInventoryFilterRequest.pageable:type_name -> common.Pageable
	1,  // 9: useractivity.inventory.UserInventoryFilterRequest.sort:type_name -> useractivity.inventory.UserInventoryFilterRequest.UserInventorySort
	14, // 10: useractivity.inventory.UserInventoryFilterRequest.properties:type_name -> useractivity.inventory.UserInventoryFilterRequest.PropertiesEntry
	17, // 11: useractivity.inventory.UserInventoryFilterResponse.pageable:type_name -> common.Pageable
	10, // 12: useractivity.inventory.UserInventoryFilterResponse.data:type_name -> useractivity.inventory.InventoryItemResponse
	10, // 13: useractivity.inventory.ListInventoryItemResponse.inventory_item:type_name -> useractivity.inventory.InventoryItemResponse
	0,  // 14: useractivity.inventory.InventoryItemResponse.inventory_item_type:type_name -> useractivity.inventory.InventoryItemType
	18, // 15: useractivity.inventory.InventoryItemResponse.item_data:type_name -> Item
	19, // 16: useractivity.inventory.InventoryItemResponse.customization:type_name -> google.protobuf.Struct
	20, // 17: useractivity.inventory.InventoryItemResponse.rarity:type_name -> Rarity
	13, // 18: useractivity.inventory.EstablishInventoryRequest.NewItemEntry.value:type_name -> useractivity.inventory.EstablishInventoryRequest.InventoryItemRequest
	13, // 19: useractivity.inventory.EstablishInventoryRequest.ModifiedItemEntry.value:type_name -> useractivity.inventory.EstablishInventoryRequest.InventoryItemRequest
	0,  // 20: useractivity.inventory.EstablishInventoryRequest.InventoryItemRequest.inventory_item_type:type_name -> useractivity.inventory.InventoryItemType
	19, // 21: useractivity.inventory.EstablishInventoryRequest.InventoryItemRequest.customization:type_name -> google.protobuf.Struct
	4,  // 22: useractivity.inventory.UserInventoryService.EstablishInventory:input_type -> useractivity.inventory.EstablishInventoryRequest
	3,  // 23: useractivity.inventory.UserInventoryService.GetAllItemByIds:input_type -> useractivity.inventory.GetAllItemByIdsRequest
	7,  // 24: useractivity.inventory.UserInventoryService.Filter:input_type -> useractivity.inventory.UserInventoryFilterRequest
	21, // 25: useractivity.inventory.UserInventoryService.GetAllCollection:input_type -> google.protobuf.Empty
	5,  // 26: useractivity.inventory.UserInventoryService.EstablishInventory:output_type -> useractivity.inventory.EstablishInventoryResponse
	9,  // 27: useractivity.inventory.UserInventoryService.GetAllItemByIds:output_type -> useractivity.inventory.ListInventoryItemResponse
	8,  // 28: useractivity.inventory.UserInventoryService.Filter:output_type -> useractivity.inventory.UserInventoryFilterResponse
	2,  // 29: useractivity.inventory.UserInventoryService.GetAllCollection:output_type -> useractivity.inventory.ListItemCollectionResponse
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_user_inventory_proto_init() }
func file_user_inventory_proto_init() {
	if File_user_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListItemCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllItemByIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishInventoryItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventoryFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventoryFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInventoryItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_inventory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishInventoryRequest_InventoryItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_inventory_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UserInventoryFilterRequest_ParentCategoryCode)(nil),
		(*UserInventoryFilterRequest_CategoryCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_inventory_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_inventory_proto_goTypes,
		DependencyIndexes: file_user_inventory_proto_depIdxs,
		EnumInfos:         file_user_inventory_proto_enumTypes,
		MessageInfos:      file_user_inventory_proto_msgTypes,
	}.Build()
	File_user_inventory_proto = out.File
	file_user_inventory_proto_rawDesc = nil
	file_user_inventory_proto_goTypes = nil
	file_user_inventory_proto_depIdxs = nil
}
