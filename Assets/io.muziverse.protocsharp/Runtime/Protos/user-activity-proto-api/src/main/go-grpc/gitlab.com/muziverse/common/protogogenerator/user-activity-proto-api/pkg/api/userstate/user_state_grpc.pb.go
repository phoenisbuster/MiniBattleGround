// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_state.proto

package userstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserStateServiceClient is the client API for UserStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStateServiceClient interface {
	UpdateUserStates(ctx context.Context, in *UpdateUserStatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserStatesByKeys(ctx context.Context, in *UserStateKeysRequest, opts ...grpc.CallOption) (*UserStatesResponse, error)
}

type userStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStateServiceClient(cc grpc.ClientConnInterface) UserStateServiceClient {
	return &userStateServiceClient{cc}
}

func (c *userStateServiceClient) UpdateUserStates(ctx context.Context, in *UpdateUserStatesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userstate.UserStateService/UpdateUserStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStateServiceClient) GetUserStatesByKeys(ctx context.Context, in *UserStateKeysRequest, opts ...grpc.CallOption) (*UserStatesResponse, error) {
	out := new(UserStatesResponse)
	err := c.cc.Invoke(ctx, "/useractivity.userstate.UserStateService/GetUserStatesByKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStateServiceServer is the server API for UserStateService service.
// All implementations must embed UnimplementedUserStateServiceServer
// for forward compatibility
type UserStateServiceServer interface {
	UpdateUserStates(context.Context, *UpdateUserStatesRequest) (*emptypb.Empty, error)
	GetUserStatesByKeys(context.Context, *UserStateKeysRequest) (*UserStatesResponse, error)
	mustEmbedUnimplementedUserStateServiceServer()
}

// UnimplementedUserStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStateServiceServer struct {
}

func (UnimplementedUserStateServiceServer) UpdateUserStates(context.Context, *UpdateUserStatesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStates not implemented")
}
func (UnimplementedUserStateServiceServer) GetUserStatesByKeys(context.Context, *UserStateKeysRequest) (*UserStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatesByKeys not implemented")
}
func (UnimplementedUserStateServiceServer) mustEmbedUnimplementedUserStateServiceServer() {}

// UnsafeUserStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStateServiceServer will
// result in compilation errors.
type UnsafeUserStateServiceServer interface {
	mustEmbedUnimplementedUserStateServiceServer()
}

func RegisterUserStateServiceServer(s grpc.ServiceRegistrar, srv UserStateServiceServer) {
	s.RegisterService(&UserStateService_ServiceDesc, srv)
}

func _UserStateService_UpdateUserStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStateServiceServer).UpdateUserStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userstate.UserStateService/UpdateUserStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStateServiceServer).UpdateUserStates(ctx, req.(*UpdateUserStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStateService_GetUserStatesByKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStateKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStateServiceServer).GetUserStatesByKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userstate.UserStateService/GetUserStatesByKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStateServiceServer).GetUserStatesByKeys(ctx, req.(*UserStateKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStateService_ServiceDesc is the grpc.ServiceDesc for UserStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.userstate.UserStateService",
	HandlerType: (*UserStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserStates",
			Handler:    _UserStateService_UpdateUserStates_Handler,
		},
		{
			MethodName: "GetUserStatesByKeys",
			Handler:    _UserStateService_GetUserStatesByKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_state.proto",
}
