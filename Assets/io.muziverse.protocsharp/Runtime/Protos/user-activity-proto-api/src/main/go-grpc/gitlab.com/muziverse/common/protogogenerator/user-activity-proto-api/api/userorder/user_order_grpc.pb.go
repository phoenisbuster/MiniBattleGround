// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_order.proto

package userorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserOrderServiceClient is the client API for UserOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserOrderServiceClient interface {
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetOrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error)
	GetOrderById(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*OrderResponse, error)
}

type userOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserOrderServiceClient(cc grpc.ClientConnInterface) UserOrderServiceClient {
	return &userOrderServiceClient{cc}
}

func (c *userOrderServiceClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/useractivity.order.UserOrderService/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderServiceClient) GetOrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error) {
	out := new(OrderHistoryResponse)
	err := c.cc.Invoke(ctx, "/useractivity.order.UserOrderService/GetOrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderServiceClient) GetOrderById(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/useractivity.order.UserOrderService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserOrderServiceServer is the server API for UserOrderService service.
// All implementations must embed UnimplementedUserOrderServiceServer
// for forward compatibility
type UserOrderServiceServer interface {
	Order(context.Context, *OrderRequest) (*OrderResponse, error)
	GetOrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error)
	GetOrderById(context.Context, *wrapperspb.Int64Value) (*OrderResponse, error)
	mustEmbedUnimplementedUserOrderServiceServer()
}

// UnimplementedUserOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserOrderServiceServer struct {
}

func (UnimplementedUserOrderServiceServer) Order(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedUserOrderServiceServer) GetOrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedUserOrderServiceServer) GetOrderById(context.Context, *wrapperspb.Int64Value) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedUserOrderServiceServer) mustEmbedUnimplementedUserOrderServiceServer() {}

// UnsafeUserOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserOrderServiceServer will
// result in compilation errors.
type UnsafeUserOrderServiceServer interface {
	mustEmbedUnimplementedUserOrderServiceServer()
}

func RegisterUserOrderServiceServer(s grpc.ServiceRegistrar, srv UserOrderServiceServer) {
	s.RegisterService(&UserOrderService_ServiceDesc, srv)
}

func _UserOrderService_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServiceServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.order.UserOrderService/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServiceServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrderService_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServiceServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.order.UserOrderService/GetOrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServiceServer).GetOrderHistory(ctx, req.(*OrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.order.UserOrderService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServiceServer).GetOrderById(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

// UserOrderService_ServiceDesc is the grpc.ServiceDesc for UserOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.order.UserOrderService",
	HandlerType: (*UserOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _UserOrderService_Order_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _UserOrderService_GetOrderHistory_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _UserOrderService_GetOrderById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_order.proto",
}
