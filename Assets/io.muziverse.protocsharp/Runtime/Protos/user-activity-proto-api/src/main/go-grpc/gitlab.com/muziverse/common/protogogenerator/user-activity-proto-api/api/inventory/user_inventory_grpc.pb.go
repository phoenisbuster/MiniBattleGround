// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInventoryServiceClient is the client API for UserInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInventoryServiceClient interface {
	EstablishInventory(ctx context.Context, in *EstablishInventoryRequest, opts ...grpc.CallOption) (*EstablishInventoryResponse, error)
	GetAllItemByIds(ctx context.Context, in *GetAllItemByIdsRequest, opts ...grpc.CallOption) (*ListInventoryItemResponse, error)
	Filter(ctx context.Context, in *UserInventoryFilterRequest, opts ...grpc.CallOption) (*UserInventoryFilterResponse, error)
}

type userInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInventoryServiceClient(cc grpc.ClientConnInterface) UserInventoryServiceClient {
	return &userInventoryServiceClient{cc}
}

func (c *userInventoryServiceClient) EstablishInventory(ctx context.Context, in *EstablishInventoryRequest, opts ...grpc.CallOption) (*EstablishInventoryResponse, error) {
	out := new(EstablishInventoryResponse)
	err := c.cc.Invoke(ctx, "/useractivity.inventory.UserInventoryService/EstablishInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInventoryServiceClient) GetAllItemByIds(ctx context.Context, in *GetAllItemByIdsRequest, opts ...grpc.CallOption) (*ListInventoryItemResponse, error) {
	out := new(ListInventoryItemResponse)
	err := c.cc.Invoke(ctx, "/useractivity.inventory.UserInventoryService/GetAllItemByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInventoryServiceClient) Filter(ctx context.Context, in *UserInventoryFilterRequest, opts ...grpc.CallOption) (*UserInventoryFilterResponse, error) {
	out := new(UserInventoryFilterResponse)
	err := c.cc.Invoke(ctx, "/useractivity.inventory.UserInventoryService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInventoryServiceServer is the server API for UserInventoryService service.
// All implementations must embed UnimplementedUserInventoryServiceServer
// for forward compatibility
type UserInventoryServiceServer interface {
	EstablishInventory(context.Context, *EstablishInventoryRequest) (*EstablishInventoryResponse, error)
	GetAllItemByIds(context.Context, *GetAllItemByIdsRequest) (*ListInventoryItemResponse, error)
	Filter(context.Context, *UserInventoryFilterRequest) (*UserInventoryFilterResponse, error)
	mustEmbedUnimplementedUserInventoryServiceServer()
}

// UnimplementedUserInventoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInventoryServiceServer struct {
}

func (UnimplementedUserInventoryServiceServer) EstablishInventory(context.Context, *EstablishInventoryRequest) (*EstablishInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishInventory not implemented")
}
func (UnimplementedUserInventoryServiceServer) GetAllItemByIds(context.Context, *GetAllItemByIdsRequest) (*ListInventoryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItemByIds not implemented")
}
func (UnimplementedUserInventoryServiceServer) Filter(context.Context, *UserInventoryFilterRequest) (*UserInventoryFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedUserInventoryServiceServer) mustEmbedUnimplementedUserInventoryServiceServer() {}

// UnsafeUserInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInventoryServiceServer will
// result in compilation errors.
type UnsafeUserInventoryServiceServer interface {
	mustEmbedUnimplementedUserInventoryServiceServer()
}

func RegisterUserInventoryServiceServer(s grpc.ServiceRegistrar, srv UserInventoryServiceServer) {
	s.RegisterService(&UserInventoryService_ServiceDesc, srv)
}

func _UserInventoryService_EstablishInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInventoryServiceServer).EstablishInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.inventory.UserInventoryService/EstablishInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInventoryServiceServer).EstablishInventory(ctx, req.(*EstablishInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInventoryService_GetAllItemByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInventoryServiceServer).GetAllItemByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.inventory.UserInventoryService/GetAllItemByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInventoryServiceServer).GetAllItemByIds(ctx, req.(*GetAllItemByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInventoryService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInventoryFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInventoryServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.inventory.UserInventoryService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInventoryServiceServer).Filter(ctx, req.(*UserInventoryFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInventoryService_ServiceDesc is the grpc.ServiceDesc for UserInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.inventory.UserInventoryService",
	HandlerType: (*UserInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstablishInventory",
			Handler:    _UserInventoryService_EstablishInventory_Handler,
		},
		{
			MethodName: "GetAllItemByIds",
			Handler:    _UserInventoryService_GetAllItemByIds_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _UserInventoryService_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_inventory.proto",
}
