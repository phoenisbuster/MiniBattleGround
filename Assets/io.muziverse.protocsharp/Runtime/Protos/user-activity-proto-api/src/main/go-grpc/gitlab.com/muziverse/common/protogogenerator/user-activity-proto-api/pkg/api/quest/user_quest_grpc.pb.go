// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_quest.proto

package quest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserQuestServiceClient is the client API for UserQuestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQuestServiceClient interface {
	ClaimRewards(ctx context.Context, in *ClaimRewardsRequest, opts ...grpc.CallOption) (*ClaimRewardsResponse, error)
	GetClaimRewardsHistory(ctx context.Context, in *GetClaimRewardsHistoryRequest, opts ...grpc.CallOption) (*GetClaimRewardsHistoryResponse, error)
	GetLoginQuestProgress(ctx context.Context, in *GetLoginQuestProgressRequest, opts ...grpc.CallOption) (*GetLoginQuestProgressResponse, error)
	PickQuest(ctx context.Context, in *PickQuestRequest, opts ...grpc.CallOption) (*PickQuestResponse, error)
	GetPickedQuests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPickQuestResponse, error)
	ChangePickedQuestStatus(ctx context.Context, in *ChangePickedQuestStatusRequest, opts ...grpc.CallOption) (*PickQuestResponse, error)
}

type userQuestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQuestServiceClient(cc grpc.ClientConnInterface) UserQuestServiceClient {
	return &userQuestServiceClient{cc}
}

func (c *userQuestServiceClient) ClaimRewards(ctx context.Context, in *ClaimRewardsRequest, opts ...grpc.CallOption) (*ClaimRewardsResponse, error) {
	out := new(ClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuestServiceClient) GetClaimRewardsHistory(ctx context.Context, in *GetClaimRewardsHistoryRequest, opts ...grpc.CallOption) (*GetClaimRewardsHistoryResponse, error) {
	out := new(GetClaimRewardsHistoryResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/GetClaimRewardsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuestServiceClient) GetLoginQuestProgress(ctx context.Context, in *GetLoginQuestProgressRequest, opts ...grpc.CallOption) (*GetLoginQuestProgressResponse, error) {
	out := new(GetLoginQuestProgressResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/GetLoginQuestProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuestServiceClient) PickQuest(ctx context.Context, in *PickQuestRequest, opts ...grpc.CallOption) (*PickQuestResponse, error) {
	out := new(PickQuestResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/PickQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuestServiceClient) GetPickedQuests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPickQuestResponse, error) {
	out := new(ListPickQuestResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/GetPickedQuests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQuestServiceClient) ChangePickedQuestStatus(ctx context.Context, in *ChangePickedQuestStatusRequest, opts ...grpc.CallOption) (*PickQuestResponse, error) {
	out := new(PickQuestResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestService/ChangePickedQuestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQuestServiceServer is the server API for UserQuestService service.
// All implementations must embed UnimplementedUserQuestServiceServer
// for forward compatibility
type UserQuestServiceServer interface {
	ClaimRewards(context.Context, *ClaimRewardsRequest) (*ClaimRewardsResponse, error)
	GetClaimRewardsHistory(context.Context, *GetClaimRewardsHistoryRequest) (*GetClaimRewardsHistoryResponse, error)
	GetLoginQuestProgress(context.Context, *GetLoginQuestProgressRequest) (*GetLoginQuestProgressResponse, error)
	PickQuest(context.Context, *PickQuestRequest) (*PickQuestResponse, error)
	GetPickedQuests(context.Context, *emptypb.Empty) (*ListPickQuestResponse, error)
	ChangePickedQuestStatus(context.Context, *ChangePickedQuestStatusRequest) (*PickQuestResponse, error)
	mustEmbedUnimplementedUserQuestServiceServer()
}

// UnimplementedUserQuestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserQuestServiceServer struct {
}

func (UnimplementedUserQuestServiceServer) ClaimRewards(context.Context, *ClaimRewardsRequest) (*ClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}
func (UnimplementedUserQuestServiceServer) GetClaimRewardsHistory(context.Context, *GetClaimRewardsHistoryRequest) (*GetClaimRewardsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimRewardsHistory not implemented")
}
func (UnimplementedUserQuestServiceServer) GetLoginQuestProgress(context.Context, *GetLoginQuestProgressRequest) (*GetLoginQuestProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginQuestProgress not implemented")
}
func (UnimplementedUserQuestServiceServer) PickQuest(context.Context, *PickQuestRequest) (*PickQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickQuest not implemented")
}
func (UnimplementedUserQuestServiceServer) GetPickedQuests(context.Context, *emptypb.Empty) (*ListPickQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPickedQuests not implemented")
}
func (UnimplementedUserQuestServiceServer) ChangePickedQuestStatus(context.Context, *ChangePickedQuestStatusRequest) (*PickQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePickedQuestStatus not implemented")
}
func (UnimplementedUserQuestServiceServer) mustEmbedUnimplementedUserQuestServiceServer() {}

// UnsafeUserQuestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQuestServiceServer will
// result in compilation errors.
type UnsafeUserQuestServiceServer interface {
	mustEmbedUnimplementedUserQuestServiceServer()
}

func RegisterUserQuestServiceServer(s grpc.ServiceRegistrar, srv UserQuestServiceServer) {
	s.RegisterService(&UserQuestService_ServiceDesc, srv)
}

func _UserQuestService_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).ClaimRewards(ctx, req.(*ClaimRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuestService_GetClaimRewardsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimRewardsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).GetClaimRewardsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/GetClaimRewardsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).GetClaimRewardsHistory(ctx, req.(*GetClaimRewardsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuestService_GetLoginQuestProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginQuestProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).GetLoginQuestProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/GetLoginQuestProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).GetLoginQuestProgress(ctx, req.(*GetLoginQuestProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuestService_PickQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).PickQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/PickQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).PickQuest(ctx, req.(*PickQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuestService_GetPickedQuests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).GetPickedQuests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/GetPickedQuests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).GetPickedQuests(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQuestService_ChangePickedQuestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePickedQuestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestServiceServer).ChangePickedQuestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestService/ChangePickedQuestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestServiceServer).ChangePickedQuestStatus(ctx, req.(*ChangePickedQuestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQuestService_ServiceDesc is the grpc.ServiceDesc for UserQuestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQuestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.quest.UserQuestService",
	HandlerType: (*UserQuestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimRewards",
			Handler:    _UserQuestService_ClaimRewards_Handler,
		},
		{
			MethodName: "GetClaimRewardsHistory",
			Handler:    _UserQuestService_GetClaimRewardsHistory_Handler,
		},
		{
			MethodName: "GetLoginQuestProgress",
			Handler:    _UserQuestService_GetLoginQuestProgress_Handler,
		},
		{
			MethodName: "PickQuest",
			Handler:    _UserQuestService_PickQuest_Handler,
		},
		{
			MethodName: "GetPickedQuests",
			Handler:    _UserQuestService_GetPickedQuests_Handler,
		},
		{
			MethodName: "ChangePickedQuestStatus",
			Handler:    _UserQuestService_ChangePickedQuestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_quest.proto",
}
