// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_friendship.proto

package useractivity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFriendshipServiceClient is the client API for UserFriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFriendshipServiceClient interface {
	SendInvitation(ctx context.Context, in *InvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFriendship(ctx context.Context, in *RemoveFriendshipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetListFriendship(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFriendshipResponse, error)
	ActionChangeStatusFriendship(ctx context.Context, in *ActionChangeStatusFriendshipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userFriendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFriendshipServiceClient(cc grpc.ClientConnInterface) UserFriendshipServiceClient {
	return &userFriendshipServiceClient{cc}
}

func (c *userFriendshipServiceClient) SendInvitation(ctx context.Context, in *InvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userfriendship.UserFriendshipService/SendInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendshipServiceClient) ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userfriendship.UserFriendshipService/ReplyInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendshipServiceClient) RemoveFriendship(ctx context.Context, in *RemoveFriendshipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userfriendship.UserFriendshipService/RemoveFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendshipServiceClient) GetListFriendship(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFriendshipResponse, error) {
	out := new(ListFriendshipResponse)
	err := c.cc.Invoke(ctx, "/useractivity.userfriendship.UserFriendshipService/GetListFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendshipServiceClient) ActionChangeStatusFriendship(ctx context.Context, in *ActionChangeStatusFriendshipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userfriendship.UserFriendshipService/ActionChangeStatusFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFriendshipServiceServer is the server API for UserFriendshipService service.
// All implementations must embed UnimplementedUserFriendshipServiceServer
// for forward compatibility
type UserFriendshipServiceServer interface {
	SendInvitation(context.Context, *InvitationRequest) (*emptypb.Empty, error)
	ReplyInvitation(context.Context, *ReplyInvitationRequest) (*emptypb.Empty, error)
	RemoveFriendship(context.Context, *RemoveFriendshipRequest) (*emptypb.Empty, error)
	GetListFriendship(context.Context, *emptypb.Empty) (*ListFriendshipResponse, error)
	ActionChangeStatusFriendship(context.Context, *ActionChangeStatusFriendshipRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserFriendshipServiceServer()
}

// UnimplementedUserFriendshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFriendshipServiceServer struct {
}

func (UnimplementedUserFriendshipServiceServer) SendInvitation(context.Context, *InvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedUserFriendshipServiceServer) ReplyInvitation(context.Context, *ReplyInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyInvitation not implemented")
}
func (UnimplementedUserFriendshipServiceServer) RemoveFriendship(context.Context, *RemoveFriendshipRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriendship not implemented")
}
func (UnimplementedUserFriendshipServiceServer) GetListFriendship(context.Context, *emptypb.Empty) (*ListFriendshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFriendship not implemented")
}
func (UnimplementedUserFriendshipServiceServer) ActionChangeStatusFriendship(context.Context, *ActionChangeStatusFriendshipRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionChangeStatusFriendship not implemented")
}
func (UnimplementedUserFriendshipServiceServer) mustEmbedUnimplementedUserFriendshipServiceServer() {}

// UnsafeUserFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFriendshipServiceServer will
// result in compilation errors.
type UnsafeUserFriendshipServiceServer interface {
	mustEmbedUnimplementedUserFriendshipServiceServer()
}

func RegisterUserFriendshipServiceServer(s grpc.ServiceRegistrar, srv UserFriendshipServiceServer) {
	s.RegisterService(&UserFriendshipService_ServiceDesc, srv)
}

func _UserFriendshipService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendshipServiceServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userfriendship.UserFriendshipService/SendInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendshipServiceServer).SendInvitation(ctx, req.(*InvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendshipService_ReplyInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendshipServiceServer).ReplyInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userfriendship.UserFriendshipService/ReplyInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendshipServiceServer).ReplyInvitation(ctx, req.(*ReplyInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendshipService_RemoveFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendshipServiceServer).RemoveFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userfriendship.UserFriendshipService/RemoveFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendshipServiceServer).RemoveFriendship(ctx, req.(*RemoveFriendshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendshipService_GetListFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendshipServiceServer).GetListFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userfriendship.UserFriendshipService/GetListFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendshipServiceServer).GetListFriendship(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFriendshipService_ActionChangeStatusFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionChangeStatusFriendshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFriendshipServiceServer).ActionChangeStatusFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userfriendship.UserFriendshipService/ActionChangeStatusFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFriendshipServiceServer).ActionChangeStatusFriendship(ctx, req.(*ActionChangeStatusFriendshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFriendshipService_ServiceDesc is the grpc.ServiceDesc for UserFriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.userfriendship.UserFriendshipService",
	HandlerType: (*UserFriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvitation",
			Handler:    _UserFriendshipService_SendInvitation_Handler,
		},
		{
			MethodName: "ReplyInvitation",
			Handler:    _UserFriendshipService_ReplyInvitation_Handler,
		},
		{
			MethodName: "RemoveFriendship",
			Handler:    _UserFriendshipService_RemoveFriendship_Handler,
		},
		{
			MethodName: "GetListFriendship",
			Handler:    _UserFriendshipService_GetListFriendship_Handler,
		},
		{
			MethodName: "ActionChangeStatusFriendship",
			Handler:    _UserFriendshipService_ActionChangeStatusFriendship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_friendship.proto",
}
