// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_room.proto

package userroom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRoomServiceClient is the client API for UserRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRoomServiceClient interface {
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UserRoom, error)
	QueryUserRoom(ctx context.Context, in *QueryUserRoomRequest, opts ...grpc.CallOption) (*UserRoom, error)
}

type userRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoomServiceClient(cc grpc.ClientConnInterface) UserRoomServiceClient {
	return &userRoomServiceClient{cc}
}

func (c *userRoomServiceClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UserRoom, error) {
	out := new(UserRoom)
	err := c.cc.Invoke(ctx, "/useractivity.userroom.UserRoomService/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoomServiceClient) QueryUserRoom(ctx context.Context, in *QueryUserRoomRequest, opts ...grpc.CallOption) (*UserRoom, error) {
	out := new(UserRoom)
	err := c.cc.Invoke(ctx, "/useractivity.userroom.UserRoomService/QueryUserRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoomServiceServer is the server API for UserRoomService service.
// All implementations must embed UnimplementedUserRoomServiceServer
// for forward compatibility
type UserRoomServiceServer interface {
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UserRoom, error)
	QueryUserRoom(context.Context, *QueryUserRoomRequest) (*UserRoom, error)
	mustEmbedUnimplementedUserRoomServiceServer()
}

// UnimplementedUserRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRoomServiceServer struct {
}

func (UnimplementedUserRoomServiceServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UserRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedUserRoomServiceServer) QueryUserRoom(context.Context, *QueryUserRoomRequest) (*UserRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserRoom not implemented")
}
func (UnimplementedUserRoomServiceServer) mustEmbedUnimplementedUserRoomServiceServer() {}

// UnsafeUserRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoomServiceServer will
// result in compilation errors.
type UnsafeUserRoomServiceServer interface {
	mustEmbedUnimplementedUserRoomServiceServer()
}

func RegisterUserRoomServiceServer(s grpc.ServiceRegistrar, srv UserRoomServiceServer) {
	s.RegisterService(&UserRoomService_ServiceDesc, srv)
}

func _UserRoomService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoomServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userroom.UserRoomService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoomServiceServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoomService_QueryUserRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoomServiceServer).QueryUserRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userroom.UserRoomService/QueryUserRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoomServiceServer).QueryUserRoom(ctx, req.(*QueryUserRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoomService_ServiceDesc is the grpc.ServiceDesc for UserRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.userroom.UserRoomService",
	HandlerType: (*UserRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRoom",
			Handler:    _UserRoomService_UpdateRoom_Handler,
		},
		{
			MethodName: "QueryUserRoom",
			Handler:    _UserRoomService_QueryUserRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_room.proto",
}
