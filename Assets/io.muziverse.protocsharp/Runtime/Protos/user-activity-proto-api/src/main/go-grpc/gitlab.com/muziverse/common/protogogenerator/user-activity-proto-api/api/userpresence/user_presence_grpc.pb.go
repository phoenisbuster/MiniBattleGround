// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_presence.proto

package userpresence

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPresenceServiceClient is the client API for UserPresenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPresenceServiceClient interface {
	UpdateUserPresence(ctx context.Context, in *UpdateUserPresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryUserPresence(ctx context.Context, in *QueryUserPresenceRequest, opts ...grpc.CallOption) (*QueryUserPresenceResponse, error)
	UpdateUsersPresence(ctx context.Context, in *UpdateUsersPresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userPresenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPresenceServiceClient(cc grpc.ClientConnInterface) UserPresenceServiceClient {
	return &userPresenceServiceClient{cc}
}

func (c *userPresenceServiceClient) UpdateUserPresence(ctx context.Context, in *UpdateUserPresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userpresence.UserPresenceService/UpdateUserPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPresenceServiceClient) QueryUserPresence(ctx context.Context, in *QueryUserPresenceRequest, opts ...grpc.CallOption) (*QueryUserPresenceResponse, error) {
	out := new(QueryUserPresenceResponse)
	err := c.cc.Invoke(ctx, "/useractivity.userpresence.UserPresenceService/QueryUserPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPresenceServiceClient) UpdateUsersPresence(ctx context.Context, in *UpdateUsersPresenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/useractivity.userpresence.UserPresenceService/UpdateUsersPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPresenceServiceServer is the server API for UserPresenceService service.
// All implementations must embed UnimplementedUserPresenceServiceServer
// for forward compatibility
type UserPresenceServiceServer interface {
	UpdateUserPresence(context.Context, *UpdateUserPresenceRequest) (*emptypb.Empty, error)
	QueryUserPresence(context.Context, *QueryUserPresenceRequest) (*QueryUserPresenceResponse, error)
	UpdateUsersPresence(context.Context, *UpdateUsersPresenceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserPresenceServiceServer()
}

// UnimplementedUserPresenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPresenceServiceServer struct {
}

func (UnimplementedUserPresenceServiceServer) UpdateUserPresence(context.Context, *UpdateUserPresenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPresence not implemented")
}
func (UnimplementedUserPresenceServiceServer) QueryUserPresence(context.Context, *QueryUserPresenceRequest) (*QueryUserPresenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserPresence not implemented")
}
func (UnimplementedUserPresenceServiceServer) UpdateUsersPresence(context.Context, *UpdateUsersPresenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsersPresence not implemented")
}
func (UnimplementedUserPresenceServiceServer) mustEmbedUnimplementedUserPresenceServiceServer() {}

// UnsafeUserPresenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPresenceServiceServer will
// result in compilation errors.
type UnsafeUserPresenceServiceServer interface {
	mustEmbedUnimplementedUserPresenceServiceServer()
}

func RegisterUserPresenceServiceServer(s grpc.ServiceRegistrar, srv UserPresenceServiceServer) {
	s.RegisterService(&UserPresenceService_ServiceDesc, srv)
}

func _UserPresenceService_UpdateUserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPresenceServiceServer).UpdateUserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userpresence.UserPresenceService/UpdateUserPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPresenceServiceServer).UpdateUserPresence(ctx, req.(*UpdateUserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPresenceService_QueryUserPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPresenceServiceServer).QueryUserPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userpresence.UserPresenceService/QueryUserPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPresenceServiceServer).QueryUserPresence(ctx, req.(*QueryUserPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPresenceService_UpdateUsersPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsersPresenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPresenceServiceServer).UpdateUsersPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.userpresence.UserPresenceService/UpdateUsersPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPresenceServiceServer).UpdateUsersPresence(ctx, req.(*UpdateUsersPresenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPresenceService_ServiceDesc is the grpc.ServiceDesc for UserPresenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPresenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.userpresence.UserPresenceService",
	HandlerType: (*UserPresenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserPresence",
			Handler:    _UserPresenceService_UpdateUserPresence_Handler,
		},
		{
			MethodName: "QueryUserPresence",
			Handler:    _UserPresenceService_QueryUserPresence_Handler,
		},
		{
			MethodName: "UpdateUsersPresence",
			Handler:    _UserPresenceService_UpdateUsersPresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_presence.proto",
}
