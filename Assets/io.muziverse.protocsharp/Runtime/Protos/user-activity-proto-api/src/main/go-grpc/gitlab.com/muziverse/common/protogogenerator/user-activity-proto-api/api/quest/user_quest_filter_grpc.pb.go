// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: user_quest_filter.proto

package quest

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/game-content-proto-api/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserQuestFilterServiceClient is the client API for UserQuestFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserQuestFilterServiceClient interface {
	Filter(ctx context.Context, in *QuestFilterRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error)
}

type userQuestFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserQuestFilterServiceClient(cc grpc.ClientConnInterface) UserQuestFilterServiceClient {
	return &userQuestFilterServiceClient{cc}
}

func (c *userQuestFilterServiceClient) Filter(ctx context.Context, in *QuestFilterRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error) {
	out := new(domain.ListQuestResponse)
	err := c.cc.Invoke(ctx, "/useractivity.quest.UserQuestFilterService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQuestFilterServiceServer is the server API for UserQuestFilterService service.
// All implementations must embed UnimplementedUserQuestFilterServiceServer
// for forward compatibility
type UserQuestFilterServiceServer interface {
	Filter(context.Context, *QuestFilterRequest) (*domain.ListQuestResponse, error)
	mustEmbedUnimplementedUserQuestFilterServiceServer()
}

// UnimplementedUserQuestFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserQuestFilterServiceServer struct {
}

func (UnimplementedUserQuestFilterServiceServer) Filter(context.Context, *QuestFilterRequest) (*domain.ListQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedUserQuestFilterServiceServer) mustEmbedUnimplementedUserQuestFilterServiceServer() {
}

// UnsafeUserQuestFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserQuestFilterServiceServer will
// result in compilation errors.
type UnsafeUserQuestFilterServiceServer interface {
	mustEmbedUnimplementedUserQuestFilterServiceServer()
}

func RegisterUserQuestFilterServiceServer(s grpc.ServiceRegistrar, srv UserQuestFilterServiceServer) {
	s.RegisterService(&UserQuestFilterService_ServiceDesc, srv)
}

func _UserQuestFilterService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQuestFilterServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/useractivity.quest.UserQuestFilterService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQuestFilterServiceServer).Filter(ctx, req.(*QuestFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserQuestFilterService_ServiceDesc is the grpc.ServiceDesc for UserQuestFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserQuestFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useractivity.quest.UserQuestFilterService",
	HandlerType: (*UserQuestFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _UserQuestFilterService_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_quest_filter.proto",
}
