// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: avatar.proto

package avatar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvatarServiceClient is the client API for AvatarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvatarServiceClient interface {
	CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error)
	GetAvatars(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListAvatarResponse, error)
	GetAvatarById(ctx context.Context, in *GetAvatarByIdRequest, opts ...grpc.CallOption) (*GetAvatarResponse, error)
	UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryListAvatarCurrentByUserId(ctx context.Context, in *QueryListAvatarCurrentByUserIdRequest, opts ...grpc.CallOption) (*QueryListAvatarCurrentByUserIdResponse, error)
	QueryAvatars(ctx context.Context, in *QueryAvatarRequest, opts ...grpc.CallOption) (*GetListAvatarResponse, error)
	SwitchAvatar(ctx context.Context, in *SwitchAvatarRequest, opts ...grpc.CallOption) (*SwitchAvatarResponse, error)
}

type avatarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarServiceClient(cc grpc.ClientConnInterface) AvatarServiceClient {
	return &avatarServiceClient{cc}
}

func (c *avatarServiceClient) CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error) {
	out := new(CreateAvatarResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) GetAvatars(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListAvatarResponse, error) {
	out := new(GetListAvatarResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/GetAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) GetAvatarById(ctx context.Context, in *GetAvatarByIdRequest, opts ...grpc.CallOption) (*GetAvatarResponse, error) {
	out := new(GetAvatarResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/GetAvatarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) QueryListAvatarCurrentByUserId(ctx context.Context, in *QueryListAvatarCurrentByUserIdRequest, opts ...grpc.CallOption) (*QueryListAvatarCurrentByUserIdResponse, error) {
	out := new(QueryListAvatarCurrentByUserIdResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/QueryListAvatarCurrentByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) QueryAvatars(ctx context.Context, in *QueryAvatarRequest, opts ...grpc.CallOption) (*GetListAvatarResponse, error) {
	out := new(GetListAvatarResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/QueryAvatars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) SwitchAvatar(ctx context.Context, in *SwitchAvatarRequest, opts ...grpc.CallOption) (*SwitchAvatarResponse, error) {
	out := new(SwitchAvatarResponse)
	err := c.cc.Invoke(ctx, "/avatar.info.AvatarService/SwitchAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServiceServer is the server API for AvatarService service.
// All implementations must embed UnimplementedAvatarServiceServer
// for forward compatibility
type AvatarServiceServer interface {
	CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error)
	GetAvatars(context.Context, *emptypb.Empty) (*GetListAvatarResponse, error)
	GetAvatarById(context.Context, *GetAvatarByIdRequest) (*GetAvatarResponse, error)
	UpdateAvatar(context.Context, *UpdateAvatarRequest) (*emptypb.Empty, error)
	QueryListAvatarCurrentByUserId(context.Context, *QueryListAvatarCurrentByUserIdRequest) (*QueryListAvatarCurrentByUserIdResponse, error)
	QueryAvatars(context.Context, *QueryAvatarRequest) (*GetListAvatarResponse, error)
	SwitchAvatar(context.Context, *SwitchAvatarRequest) (*SwitchAvatarResponse, error)
	mustEmbedUnimplementedAvatarServiceServer()
}

// UnimplementedAvatarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvatarServiceServer struct {
}

func (UnimplementedAvatarServiceServer) CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) GetAvatars(context.Context, *emptypb.Empty) (*GetListAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatars not implemented")
}
func (UnimplementedAvatarServiceServer) GetAvatarById(context.Context, *GetAvatarByIdRequest) (*GetAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarById not implemented")
}
func (UnimplementedAvatarServiceServer) UpdateAvatar(context.Context, *UpdateAvatarRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) QueryListAvatarCurrentByUserId(context.Context, *QueryListAvatarCurrentByUserIdRequest) (*QueryListAvatarCurrentByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryListAvatarCurrentByUserId not implemented")
}
func (UnimplementedAvatarServiceServer) QueryAvatars(context.Context, *QueryAvatarRequest) (*GetListAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvatars not implemented")
}
func (UnimplementedAvatarServiceServer) SwitchAvatar(context.Context, *SwitchAvatarRequest) (*SwitchAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) mustEmbedUnimplementedAvatarServiceServer() {}

// UnsafeAvatarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServiceServer will
// result in compilation errors.
type UnsafeAvatarServiceServer interface {
	mustEmbedUnimplementedAvatarServiceServer()
}

func RegisterAvatarServiceServer(s grpc.ServiceRegistrar, srv AvatarServiceServer) {
	s.RegisterService(&AvatarService_ServiceDesc, srv)
}

func _AvatarService_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).CreateAvatar(ctx, req.(*CreateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_GetAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/GetAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetAvatars(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_GetAvatarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetAvatarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/GetAvatarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetAvatarById(ctx, req.(*GetAvatarByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).UpdateAvatar(ctx, req.(*UpdateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_QueryListAvatarCurrentByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAvatarCurrentByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).QueryListAvatarCurrentByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/QueryListAvatarCurrentByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).QueryListAvatarCurrentByUserId(ctx, req.(*QueryListAvatarCurrentByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_QueryAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).QueryAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/QueryAvatars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).QueryAvatars(ctx, req.(*QueryAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_SwitchAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).SwitchAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avatar.info.AvatarService/SwitchAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).SwitchAvatar(ctx, req.(*SwitchAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvatarService_ServiceDesc is the grpc.ServiceDesc for AvatarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvatarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avatar.info.AvatarService",
	HandlerType: (*AvatarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAvatar",
			Handler:    _AvatarService_CreateAvatar_Handler,
		},
		{
			MethodName: "GetAvatars",
			Handler:    _AvatarService_GetAvatars_Handler,
		},
		{
			MethodName: "GetAvatarById",
			Handler:    _AvatarService_GetAvatarById_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _AvatarService_UpdateAvatar_Handler,
		},
		{
			MethodName: "QueryListAvatarCurrentByUserId",
			Handler:    _AvatarService_QueryListAvatarCurrentByUserId_Handler,
		},
		{
			MethodName: "QueryAvatars",
			Handler:    _AvatarService_QueryAvatars_Handler,
		},
		{
			MethodName: "SwitchAvatar",
			Handler:    _AvatarService_SwitchAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar.proto",
}
