// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: k8s_fleet.proto

package fleet

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/kubernetes-proto-api/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameFleetServiceClient is the client API for GameFleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameFleetServiceClient interface {
	CreateFleets(ctx context.Context, in *GameFleetCreationRequestWrapper, opts ...grpc.CallOption) (*GameFleetResponseWrapper, error)
	GetFleetById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.GameFleetResponse, error)
	DeleteFleetById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFleetByIds(ctx context.Context, in *FleetIdsRequest, opts ...grpc.CallOption) (*GameFleetResponseWrapper, error)
}

type gameFleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameFleetServiceClient(cc grpc.ClientConnInterface) GameFleetServiceClient {
	return &gameFleetServiceClient{cc}
}

func (c *gameFleetServiceClient) CreateFleets(ctx context.Context, in *GameFleetCreationRequestWrapper, opts ...grpc.CallOption) (*GameFleetResponseWrapper, error) {
	out := new(GameFleetResponseWrapper)
	err := c.cc.Invoke(ctx, "/kubernetes.fleet.GameFleetService/CreateFleets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameFleetServiceClient) GetFleetById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.GameFleetResponse, error) {
	out := new(domain.GameFleetResponse)
	err := c.cc.Invoke(ctx, "/kubernetes.fleet.GameFleetService/GetFleetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameFleetServiceClient) DeleteFleetById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kubernetes.fleet.GameFleetService/DeleteFleetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameFleetServiceClient) GetFleetByIds(ctx context.Context, in *FleetIdsRequest, opts ...grpc.CallOption) (*GameFleetResponseWrapper, error) {
	out := new(GameFleetResponseWrapper)
	err := c.cc.Invoke(ctx, "/kubernetes.fleet.GameFleetService/GetFleetByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameFleetServiceServer is the server API for GameFleetService service.
// All implementations must embed UnimplementedGameFleetServiceServer
// for forward compatibility
type GameFleetServiceServer interface {
	CreateFleets(context.Context, *GameFleetCreationRequestWrapper) (*GameFleetResponseWrapper, error)
	GetFleetById(context.Context, *wrapperspb.StringValue) (*domain.GameFleetResponse, error)
	DeleteFleetById(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetFleetByIds(context.Context, *FleetIdsRequest) (*GameFleetResponseWrapper, error)
	mustEmbedUnimplementedGameFleetServiceServer()
}

// UnimplementedGameFleetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameFleetServiceServer struct {
}

func (UnimplementedGameFleetServiceServer) CreateFleets(context.Context, *GameFleetCreationRequestWrapper) (*GameFleetResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFleets not implemented")
}
func (UnimplementedGameFleetServiceServer) GetFleetById(context.Context, *wrapperspb.StringValue) (*domain.GameFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleetById not implemented")
}
func (UnimplementedGameFleetServiceServer) DeleteFleetById(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFleetById not implemented")
}
func (UnimplementedGameFleetServiceServer) GetFleetByIds(context.Context, *FleetIdsRequest) (*GameFleetResponseWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleetByIds not implemented")
}
func (UnimplementedGameFleetServiceServer) mustEmbedUnimplementedGameFleetServiceServer() {}

// UnsafeGameFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameFleetServiceServer will
// result in compilation errors.
type UnsafeGameFleetServiceServer interface {
	mustEmbedUnimplementedGameFleetServiceServer()
}

func RegisterGameFleetServiceServer(s grpc.ServiceRegistrar, srv GameFleetServiceServer) {
	s.RegisterService(&GameFleetService_ServiceDesc, srv)
}

func _GameFleetService_CreateFleets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameFleetCreationRequestWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameFleetServiceServer).CreateFleets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.fleet.GameFleetService/CreateFleets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameFleetServiceServer).CreateFleets(ctx, req.(*GameFleetCreationRequestWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameFleetService_GetFleetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameFleetServiceServer).GetFleetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.fleet.GameFleetService/GetFleetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameFleetServiceServer).GetFleetById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameFleetService_DeleteFleetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameFleetServiceServer).DeleteFleetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.fleet.GameFleetService/DeleteFleetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameFleetServiceServer).DeleteFleetById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameFleetService_GetFleetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FleetIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameFleetServiceServer).GetFleetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubernetes.fleet.GameFleetService/GetFleetByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameFleetServiceServer).GetFleetByIds(ctx, req.(*FleetIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameFleetService_ServiceDesc is the grpc.ServiceDesc for GameFleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameFleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubernetes.fleet.GameFleetService",
	HandlerType: (*GameFleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFleets",
			Handler:    _GameFleetService_CreateFleets_Handler,
		},
		{
			MethodName: "GetFleetById",
			Handler:    _GameFleetService_GetFleetById_Handler,
		},
		{
			MethodName: "DeleteFleetById",
			Handler:    _GameFleetService_DeleteFleetById_Handler,
		},
		{
			MethodName: "GetFleetByIds",
			Handler:    _GameFleetService_GetFleetByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8s_fleet.proto",
}
