// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: friendship.proto

package friendship

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendshipServiceClient is the client API for FriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipServiceClient interface {
	SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeFriendshipStatus(ctx context.Context, in *ChangeFriendshipStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckFriendship(ctx context.Context, in *CheckFriendshipRequest, opts ...grpc.CallOption) (*FriendShipResponse, error)
	GetListInvitation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInvitationResponse, error)
}

type friendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipServiceClient(cc grpc.ClientConnInterface) FriendshipServiceClient {
	return &friendshipServiceClient{cc}
}

func (c *friendshipServiceClient) SendInvitation(ctx context.Context, in *SendInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/friendship.friendship.FriendshipService/SendInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/friendship.friendship.FriendshipService/ReplyInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) ChangeFriendshipStatus(ctx context.Context, in *ChangeFriendshipStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/friendship.friendship.FriendshipService/ChangeFriendshipStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) CheckFriendship(ctx context.Context, in *CheckFriendshipRequest, opts ...grpc.CallOption) (*FriendShipResponse, error) {
	out := new(FriendShipResponse)
	err := c.cc.Invoke(ctx, "/friendship.friendship.FriendshipService/CheckFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) GetListInvitation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInvitationResponse, error) {
	out := new(ListInvitationResponse)
	err := c.cc.Invoke(ctx, "/friendship.friendship.FriendshipService/GetListInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServiceServer is the server API for FriendshipService service.
// All implementations must embed UnimplementedFriendshipServiceServer
// for forward compatibility
type FriendshipServiceServer interface {
	SendInvitation(context.Context, *SendInvitationRequest) (*emptypb.Empty, error)
	ReplyInvitation(context.Context, *ReplyInvitationRequest) (*emptypb.Empty, error)
	ChangeFriendshipStatus(context.Context, *ChangeFriendshipStatusRequest) (*emptypb.Empty, error)
	CheckFriendship(context.Context, *CheckFriendshipRequest) (*FriendShipResponse, error)
	GetListInvitation(context.Context, *emptypb.Empty) (*ListInvitationResponse, error)
	mustEmbedUnimplementedFriendshipServiceServer()
}

// UnimplementedFriendshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendshipServiceServer struct {
}

func (UnimplementedFriendshipServiceServer) SendInvitation(context.Context, *SendInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedFriendshipServiceServer) ReplyInvitation(context.Context, *ReplyInvitationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyInvitation not implemented")
}
func (UnimplementedFriendshipServiceServer) ChangeFriendshipStatus(context.Context, *ChangeFriendshipStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFriendshipStatus not implemented")
}
func (UnimplementedFriendshipServiceServer) CheckFriendship(context.Context, *CheckFriendshipRequest) (*FriendShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFriendship not implemented")
}
func (UnimplementedFriendshipServiceServer) GetListInvitation(context.Context, *emptypb.Empty) (*ListInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListInvitation not implemented")
}
func (UnimplementedFriendshipServiceServer) mustEmbedUnimplementedFriendshipServiceServer() {}

// UnsafeFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServiceServer will
// result in compilation errors.
type UnsafeFriendshipServiceServer interface {
	mustEmbedUnimplementedFriendshipServiceServer()
}

func RegisterFriendshipServiceServer(s grpc.ServiceRegistrar, srv FriendshipServiceServer) {
	s.RegisterService(&FriendshipService_ServiceDesc, srv)
}

func _FriendshipService_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.friendship.FriendshipService/SendInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).SendInvitation(ctx, req.(*SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_ReplyInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).ReplyInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.friendship.FriendshipService/ReplyInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).ReplyInvitation(ctx, req.(*ReplyInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_ChangeFriendshipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFriendshipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).ChangeFriendshipStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.friendship.FriendshipService/ChangeFriendshipStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).ChangeFriendshipStatus(ctx, req.(*ChangeFriendshipStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_CheckFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFriendshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).CheckFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.friendship.FriendshipService/CheckFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).CheckFriendship(ctx, req.(*CheckFriendshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_GetListInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).GetListInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.friendship.FriendshipService/GetListInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).GetListInvitation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendshipService_ServiceDesc is the grpc.ServiceDesc for FriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friendship.friendship.FriendshipService",
	HandlerType: (*FriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInvitation",
			Handler:    _FriendshipService_SendInvitation_Handler,
		},
		{
			MethodName: "ReplyInvitation",
			Handler:    _FriendshipService_ReplyInvitation_Handler,
		},
		{
			MethodName: "ChangeFriendshipStatus",
			Handler:    _FriendshipService_ChangeFriendshipStatus_Handler,
		},
		{
			MethodName: "CheckFriendship",
			Handler:    _FriendshipService_CheckFriendship_Handler,
		},
		{
			MethodName: "GetListInvitation",
			Handler:    _FriendshipService_GetListInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friendship.proto",
}
