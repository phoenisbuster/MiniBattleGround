// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: chat_channel_service.proto

package channel

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/chat-proto-api/pkg/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatChannelServiceClient is the client API for ChatChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatChannelServiceClient interface {
	GetChatMessageByChannel(ctx context.Context, in *domain.ChatMessageByChannelRequest, opts ...grpc.CallOption) (*domain.ChatMessageByChannelResponse, error)
}

type chatChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatChannelServiceClient(cc grpc.ClientConnInterface) ChatChannelServiceClient {
	return &chatChannelServiceClient{cc}
}

func (c *chatChannelServiceClient) GetChatMessageByChannel(ctx context.Context, in *domain.ChatMessageByChannelRequest, opts ...grpc.CallOption) (*domain.ChatMessageByChannelResponse, error) {
	out := new(domain.ChatMessageByChannelResponse)
	err := c.cc.Invoke(ctx, "/chat.channel.ChatChannelService/GetChatMessageByChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatChannelServiceServer is the server API for ChatChannelService service.
// All implementations must embed UnimplementedChatChannelServiceServer
// for forward compatibility
type ChatChannelServiceServer interface {
	GetChatMessageByChannel(context.Context, *domain.ChatMessageByChannelRequest) (*domain.ChatMessageByChannelResponse, error)
	mustEmbedUnimplementedChatChannelServiceServer()
}

// UnimplementedChatChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatChannelServiceServer struct {
}

func (UnimplementedChatChannelServiceServer) GetChatMessageByChannel(context.Context, *domain.ChatMessageByChannelRequest) (*domain.ChatMessageByChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessageByChannel not implemented")
}
func (UnimplementedChatChannelServiceServer) mustEmbedUnimplementedChatChannelServiceServer() {}

// UnsafeChatChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatChannelServiceServer will
// result in compilation errors.
type UnsafeChatChannelServiceServer interface {
	mustEmbedUnimplementedChatChannelServiceServer()
}

func RegisterChatChannelServiceServer(s grpc.ServiceRegistrar, srv ChatChannelServiceServer) {
	s.RegisterService(&ChatChannelService_ServiceDesc, srv)
}

func _ChatChannelService_GetChatMessageByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.ChatMessageByChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatChannelServiceServer).GetChatMessageByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.channel.ChatChannelService/GetChatMessageByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatChannelServiceServer).GetChatMessageByChannel(ctx, req.(*domain.ChatMessageByChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatChannelService_ServiceDesc is the grpc.ServiceDesc for ChatChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.channel.ChatChannelService",
	HandlerType: (*ChatChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatMessageByChannel",
			Handler:    _ChatChannelService_GetChatMessageByChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_channel_service.proto",
}
