// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_game_object.proto

package game_object

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameObjectServiceClient is the client API for GameObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameObjectServiceClient interface {
	GetGameObjectByIsland(ctx context.Context, in *GameObjectByIslandRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error)
	GetGameObjectByPosition(ctx context.Context, in *GameObjectByPositionRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error)
	GetGameObjectByIds(ctx context.Context, in *GameObjectByIdsRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error)
	CreateGameObjectTree(ctx context.Context, in *CreateObjectTreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGameObject(ctx context.Context, in *UpdateObjectTreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGameObjectMetadata(ctx context.Context, in *UpdateObjectMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameObjectServiceClient(cc grpc.ClientConnInterface) GameObjectServiceClient {
	return &gameObjectServiceClient{cc}
}

func (c *gameObjectServiceClient) GetGameObjectByIsland(ctx context.Context, in *GameObjectByIslandRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error) {
	out := new(ListGameObjectResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/GetGameObjectByIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameObjectServiceClient) GetGameObjectByPosition(ctx context.Context, in *GameObjectByPositionRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error) {
	out := new(ListGameObjectResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/GetGameObjectByPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameObjectServiceClient) GetGameObjectByIds(ctx context.Context, in *GameObjectByIdsRequest, opts ...grpc.CallOption) (*ListGameObjectResponse, error) {
	out := new(ListGameObjectResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/GetGameObjectByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameObjectServiceClient) CreateGameObjectTree(ctx context.Context, in *CreateObjectTreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/CreateGameObjectTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameObjectServiceClient) UpdateGameObject(ctx context.Context, in *UpdateObjectTreeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/UpdateGameObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameObjectServiceClient) UpdateGameObjectMetadata(ctx context.Context, in *UpdateObjectMetadataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.gameobject.GameObjectService/UpdateGameObjectMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameObjectServiceServer is the server API for GameObjectService service.
// All implementations must embed UnimplementedGameObjectServiceServer
// for forward compatibility
type GameObjectServiceServer interface {
	GetGameObjectByIsland(context.Context, *GameObjectByIslandRequest) (*ListGameObjectResponse, error)
	GetGameObjectByPosition(context.Context, *GameObjectByPositionRequest) (*ListGameObjectResponse, error)
	GetGameObjectByIds(context.Context, *GameObjectByIdsRequest) (*ListGameObjectResponse, error)
	CreateGameObjectTree(context.Context, *CreateObjectTreeRequest) (*emptypb.Empty, error)
	UpdateGameObject(context.Context, *UpdateObjectTreeRequest) (*emptypb.Empty, error)
	UpdateGameObjectMetadata(context.Context, *UpdateObjectMetadataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameObjectServiceServer()
}

// UnimplementedGameObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameObjectServiceServer struct {
}

func (UnimplementedGameObjectServiceServer) GetGameObjectByIsland(context.Context, *GameObjectByIslandRequest) (*ListGameObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameObjectByIsland not implemented")
}
func (UnimplementedGameObjectServiceServer) GetGameObjectByPosition(context.Context, *GameObjectByPositionRequest) (*ListGameObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameObjectByPosition not implemented")
}
func (UnimplementedGameObjectServiceServer) GetGameObjectByIds(context.Context, *GameObjectByIdsRequest) (*ListGameObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameObjectByIds not implemented")
}
func (UnimplementedGameObjectServiceServer) CreateGameObjectTree(context.Context, *CreateObjectTreeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameObjectTree not implemented")
}
func (UnimplementedGameObjectServiceServer) UpdateGameObject(context.Context, *UpdateObjectTreeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameObject not implemented")
}
func (UnimplementedGameObjectServiceServer) UpdateGameObjectMetadata(context.Context, *UpdateObjectMetadataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameObjectMetadata not implemented")
}
func (UnimplementedGameObjectServiceServer) mustEmbedUnimplementedGameObjectServiceServer() {}

// UnsafeGameObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameObjectServiceServer will
// result in compilation errors.
type UnsafeGameObjectServiceServer interface {
	mustEmbedUnimplementedGameObjectServiceServer()
}

func RegisterGameObjectServiceServer(s grpc.ServiceRegistrar, srv GameObjectServiceServer) {
	s.RegisterService(&GameObjectService_ServiceDesc, srv)
}

func _GameObjectService_GetGameObjectByIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameObjectByIslandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).GetGameObjectByIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/GetGameObjectByIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).GetGameObjectByIsland(ctx, req.(*GameObjectByIslandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameObjectService_GetGameObjectByPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameObjectByPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).GetGameObjectByPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/GetGameObjectByPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).GetGameObjectByPosition(ctx, req.(*GameObjectByPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameObjectService_GetGameObjectByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameObjectByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).GetGameObjectByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/GetGameObjectByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).GetGameObjectByIds(ctx, req.(*GameObjectByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameObjectService_CreateGameObjectTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).CreateGameObjectTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/CreateGameObjectTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).CreateGameObjectTree(ctx, req.(*CreateObjectTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameObjectService_UpdateGameObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).UpdateGameObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/UpdateGameObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).UpdateGameObject(ctx, req.(*UpdateObjectTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameObjectService_UpdateGameObjectMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameObjectServiceServer).UpdateGameObjectMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.gameobject.GameObjectService/UpdateGameObjectMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameObjectServiceServer).UpdateGameObjectMetadata(ctx, req.(*UpdateObjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameObjectService_ServiceDesc is the grpc.ServiceDesc for GameObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.gameobject.GameObjectService",
	HandlerType: (*GameObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameObjectByIsland",
			Handler:    _GameObjectService_GetGameObjectByIsland_Handler,
		},
		{
			MethodName: "GetGameObjectByPosition",
			Handler:    _GameObjectService_GetGameObjectByPosition_Handler,
		},
		{
			MethodName: "GetGameObjectByIds",
			Handler:    _GameObjectService_GetGameObjectByIds_Handler,
		},
		{
			MethodName: "CreateGameObjectTree",
			Handler:    _GameObjectService_CreateGameObjectTree_Handler,
		},
		{
			MethodName: "UpdateGameObject",
			Handler:    _GameObjectService_UpdateGameObject_Handler,
		},
		{
			MethodName: "UpdateGameObjectMetadata",
			Handler:    _GameObjectService_UpdateGameObjectMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_game_object.proto",
}
