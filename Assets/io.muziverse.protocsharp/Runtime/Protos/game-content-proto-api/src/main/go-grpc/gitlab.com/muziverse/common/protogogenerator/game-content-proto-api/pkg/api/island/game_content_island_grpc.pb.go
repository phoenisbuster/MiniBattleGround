// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_island.proto

package island

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/game-content-proto-api/pkg/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameContentIslandServiceClient is the client API for GameContentIslandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameContentIslandServiceClient interface {
	CreateSingleIsland(ctx context.Context, in *GameContentIslandCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSingleIsland(ctx context.Context, in *GameContentIslandUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSingleIslandByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSingleIslandByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.GameContentIslandModel, error)
	GetAllIslands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameIslandListResponse, error)
	ChangeIslandStatusByCode(ctx context.Context, in *GameContentIslandChangeStatusRequest, opts ...grpc.CallOption) (*domain.GameContentIslandModel, error)
}

type gameContentIslandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameContentIslandServiceClient(cc grpc.ClientConnInterface) GameContentIslandServiceClient {
	return &gameContentIslandServiceClient{cc}
}

func (c *gameContentIslandServiceClient) CreateSingleIsland(ctx context.Context, in *GameContentIslandCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/CreateSingleIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentIslandServiceClient) UpdateSingleIsland(ctx context.Context, in *GameContentIslandUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/UpdateSingleIsland", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentIslandServiceClient) DeleteSingleIslandByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/DeleteSingleIslandByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentIslandServiceClient) GetSingleIslandByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*domain.GameContentIslandModel, error) {
	out := new(domain.GameContentIslandModel)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/GetSingleIslandByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentIslandServiceClient) GetAllIslands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GameIslandListResponse, error) {
	out := new(GameIslandListResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/GetAllIslands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentIslandServiceClient) ChangeIslandStatusByCode(ctx context.Context, in *GameContentIslandChangeStatusRequest, opts ...grpc.CallOption) (*domain.GameContentIslandModel, error) {
	out := new(domain.GameContentIslandModel)
	err := c.cc.Invoke(ctx, "/gamecontent.island.GameContentIslandService/ChangeIslandStatusByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameContentIslandServiceServer is the server API for GameContentIslandService service.
// All implementations must embed UnimplementedGameContentIslandServiceServer
// for forward compatibility
type GameContentIslandServiceServer interface {
	CreateSingleIsland(context.Context, *GameContentIslandCreateRequest) (*emptypb.Empty, error)
	UpdateSingleIsland(context.Context, *GameContentIslandUpdateRequest) (*emptypb.Empty, error)
	DeleteSingleIslandByCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetSingleIslandByCode(context.Context, *wrapperspb.StringValue) (*domain.GameContentIslandModel, error)
	GetAllIslands(context.Context, *emptypb.Empty) (*GameIslandListResponse, error)
	ChangeIslandStatusByCode(context.Context, *GameContentIslandChangeStatusRequest) (*domain.GameContentIslandModel, error)
	mustEmbedUnimplementedGameContentIslandServiceServer()
}

// UnimplementedGameContentIslandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameContentIslandServiceServer struct {
}

func (UnimplementedGameContentIslandServiceServer) CreateSingleIsland(context.Context, *GameContentIslandCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSingleIsland not implemented")
}
func (UnimplementedGameContentIslandServiceServer) UpdateSingleIsland(context.Context, *GameContentIslandUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSingleIsland not implemented")
}
func (UnimplementedGameContentIslandServiceServer) DeleteSingleIslandByCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleIslandByCode not implemented")
}
func (UnimplementedGameContentIslandServiceServer) GetSingleIslandByCode(context.Context, *wrapperspb.StringValue) (*domain.GameContentIslandModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleIslandByCode not implemented")
}
func (UnimplementedGameContentIslandServiceServer) GetAllIslands(context.Context, *emptypb.Empty) (*GameIslandListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIslands not implemented")
}
func (UnimplementedGameContentIslandServiceServer) ChangeIslandStatusByCode(context.Context, *GameContentIslandChangeStatusRequest) (*domain.GameContentIslandModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeIslandStatusByCode not implemented")
}
func (UnimplementedGameContentIslandServiceServer) mustEmbedUnimplementedGameContentIslandServiceServer() {
}

// UnsafeGameContentIslandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameContentIslandServiceServer will
// result in compilation errors.
type UnsafeGameContentIslandServiceServer interface {
	mustEmbedUnimplementedGameContentIslandServiceServer()
}

func RegisterGameContentIslandServiceServer(s grpc.ServiceRegistrar, srv GameContentIslandServiceServer) {
	s.RegisterService(&GameContentIslandService_ServiceDesc, srv)
}

func _GameContentIslandService_CreateSingleIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameContentIslandCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).CreateSingleIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/CreateSingleIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).CreateSingleIsland(ctx, req.(*GameContentIslandCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentIslandService_UpdateSingleIsland_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameContentIslandUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).UpdateSingleIsland(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/UpdateSingleIsland",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).UpdateSingleIsland(ctx, req.(*GameContentIslandUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentIslandService_DeleteSingleIslandByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).DeleteSingleIslandByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/DeleteSingleIslandByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).DeleteSingleIslandByCode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentIslandService_GetSingleIslandByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).GetSingleIslandByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/GetSingleIslandByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).GetSingleIslandByCode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentIslandService_GetAllIslands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).GetAllIslands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/GetAllIslands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).GetAllIslands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentIslandService_ChangeIslandStatusByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameContentIslandChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentIslandServiceServer).ChangeIslandStatusByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.island.GameContentIslandService/ChangeIslandStatusByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentIslandServiceServer).ChangeIslandStatusByCode(ctx, req.(*GameContentIslandChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameContentIslandService_ServiceDesc is the grpc.ServiceDesc for GameContentIslandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameContentIslandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.island.GameContentIslandService",
	HandlerType: (*GameContentIslandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSingleIsland",
			Handler:    _GameContentIslandService_CreateSingleIsland_Handler,
		},
		{
			MethodName: "UpdateSingleIsland",
			Handler:    _GameContentIslandService_UpdateSingleIsland_Handler,
		},
		{
			MethodName: "DeleteSingleIslandByCode",
			Handler:    _GameContentIslandService_DeleteSingleIslandByCode_Handler,
		},
		{
			MethodName: "GetSingleIslandByCode",
			Handler:    _GameContentIslandService_GetSingleIslandByCode_Handler,
		},
		{
			MethodName: "GetAllIslands",
			Handler:    _GameContentIslandService_GetAllIslands_Handler,
		},
		{
			MethodName: "ChangeIslandStatusByCode",
			Handler:    _GameContentIslandService_ChangeIslandStatusByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_island.proto",
}
