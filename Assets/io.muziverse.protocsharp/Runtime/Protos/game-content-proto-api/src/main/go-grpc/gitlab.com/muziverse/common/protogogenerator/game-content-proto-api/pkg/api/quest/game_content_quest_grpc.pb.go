// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_quest.proto

package quest

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/game-content-proto-api/pkg/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameContentQuestServiceClient is the client API for GameContentQuestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameContentQuestServiceClient interface {
	CreateSingleQuest(ctx context.Context, in *QuestCreationRequest, opts ...grpc.CallOption) (*domain.QuestResponse, error)
	CreateMultiQuests(ctx context.Context, in *ListQuestCreationRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error)
	GetSingleQuest(ctx context.Context, in *GetSingleQuestRequest, opts ...grpc.CallOption) (*domain.QuestResponse, error)
	GetMultiQuests(ctx context.Context, in *GetMultiQuestsRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error)
}

type gameContentQuestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameContentQuestServiceClient(cc grpc.ClientConnInterface) GameContentQuestServiceClient {
	return &gameContentQuestServiceClient{cc}
}

func (c *gameContentQuestServiceClient) CreateSingleQuest(ctx context.Context, in *QuestCreationRequest, opts ...grpc.CallOption) (*domain.QuestResponse, error) {
	out := new(domain.QuestResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.quest.GameContentQuestService/CreateSingleQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentQuestServiceClient) CreateMultiQuests(ctx context.Context, in *ListQuestCreationRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error) {
	out := new(domain.ListQuestResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.quest.GameContentQuestService/CreateMultiQuests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentQuestServiceClient) GetSingleQuest(ctx context.Context, in *GetSingleQuestRequest, opts ...grpc.CallOption) (*domain.QuestResponse, error) {
	out := new(domain.QuestResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.quest.GameContentQuestService/GetSingleQuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentQuestServiceClient) GetMultiQuests(ctx context.Context, in *GetMultiQuestsRequest, opts ...grpc.CallOption) (*domain.ListQuestResponse, error) {
	out := new(domain.ListQuestResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.quest.GameContentQuestService/GetMultiQuests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameContentQuestServiceServer is the server API for GameContentQuestService service.
// All implementations must embed UnimplementedGameContentQuestServiceServer
// for forward compatibility
type GameContentQuestServiceServer interface {
	CreateSingleQuest(context.Context, *QuestCreationRequest) (*domain.QuestResponse, error)
	CreateMultiQuests(context.Context, *ListQuestCreationRequest) (*domain.ListQuestResponse, error)
	GetSingleQuest(context.Context, *GetSingleQuestRequest) (*domain.QuestResponse, error)
	GetMultiQuests(context.Context, *GetMultiQuestsRequest) (*domain.ListQuestResponse, error)
	mustEmbedUnimplementedGameContentQuestServiceServer()
}

// UnimplementedGameContentQuestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameContentQuestServiceServer struct {
}

func (UnimplementedGameContentQuestServiceServer) CreateSingleQuest(context.Context, *QuestCreationRequest) (*domain.QuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSingleQuest not implemented")
}
func (UnimplementedGameContentQuestServiceServer) CreateMultiQuests(context.Context, *ListQuestCreationRequest) (*domain.ListQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiQuests not implemented")
}
func (UnimplementedGameContentQuestServiceServer) GetSingleQuest(context.Context, *GetSingleQuestRequest) (*domain.QuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleQuest not implemented")
}
func (UnimplementedGameContentQuestServiceServer) GetMultiQuests(context.Context, *GetMultiQuestsRequest) (*domain.ListQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiQuests not implemented")
}
func (UnimplementedGameContentQuestServiceServer) mustEmbedUnimplementedGameContentQuestServiceServer() {
}

// UnsafeGameContentQuestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameContentQuestServiceServer will
// result in compilation errors.
type UnsafeGameContentQuestServiceServer interface {
	mustEmbedUnimplementedGameContentQuestServiceServer()
}

func RegisterGameContentQuestServiceServer(s grpc.ServiceRegistrar, srv GameContentQuestServiceServer) {
	s.RegisterService(&GameContentQuestService_ServiceDesc, srv)
}

func _GameContentQuestService_CreateSingleQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentQuestServiceServer).CreateSingleQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.quest.GameContentQuestService/CreateSingleQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentQuestServiceServer).CreateSingleQuest(ctx, req.(*QuestCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentQuestService_CreateMultiQuests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentQuestServiceServer).CreateMultiQuests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.quest.GameContentQuestService/CreateMultiQuests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentQuestServiceServer).CreateMultiQuests(ctx, req.(*ListQuestCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentQuestService_GetSingleQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentQuestServiceServer).GetSingleQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.quest.GameContentQuestService/GetSingleQuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentQuestServiceServer).GetSingleQuest(ctx, req.(*GetSingleQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentQuestService_GetMultiQuests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiQuestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentQuestServiceServer).GetMultiQuests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.quest.GameContentQuestService/GetMultiQuests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentQuestServiceServer).GetMultiQuests(ctx, req.(*GetMultiQuestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameContentQuestService_ServiceDesc is the grpc.ServiceDesc for GameContentQuestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameContentQuestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.quest.GameContentQuestService",
	HandlerType: (*GameContentQuestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSingleQuest",
			Handler:    _GameContentQuestService_CreateSingleQuest_Handler,
		},
		{
			MethodName: "CreateMultiQuests",
			Handler:    _GameContentQuestService_CreateMultiQuests_Handler,
		},
		{
			MethodName: "GetSingleQuest",
			Handler:    _GameContentQuestService_GetSingleQuest_Handler,
		},
		{
			MethodName: "GetMultiQuests",
			Handler:    _GameContentQuestService_GetMultiQuests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_quest.proto",
}
