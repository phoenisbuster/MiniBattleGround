// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_currency.proto

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameContentCurrencyServiceClient is the client API for GameContentCurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameContentCurrencyServiceClient interface {
	GetSingleCurrency(ctx context.Context, in *GetSingleCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	GetAllCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCurrencyResponse, error)
	GetAllNetworks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNetworkResponse, error)
}

type gameContentCurrencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameContentCurrencyServiceClient(cc grpc.ClientConnInterface) GameContentCurrencyServiceClient {
	return &gameContentCurrencyServiceClient{cc}
}

func (c *gameContentCurrencyServiceClient) GetSingleCurrency(ctx context.Context, in *GetSingleCurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.currency.GameContentCurrencyService/GetSingleCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentCurrencyServiceClient) GetAllCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCurrencyResponse, error) {
	out := new(ListCurrencyResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.currency.GameContentCurrencyService/GetAllCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentCurrencyServiceClient) GetAllNetworks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNetworkResponse, error) {
	out := new(ListNetworkResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.currency.GameContentCurrencyService/GetAllNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameContentCurrencyServiceServer is the server API for GameContentCurrencyService service.
// All implementations must embed UnimplementedGameContentCurrencyServiceServer
// for forward compatibility
type GameContentCurrencyServiceServer interface {
	GetSingleCurrency(context.Context, *GetSingleCurrencyRequest) (*CurrencyResponse, error)
	GetAllCurrencies(context.Context, *emptypb.Empty) (*ListCurrencyResponse, error)
	GetAllNetworks(context.Context, *emptypb.Empty) (*ListNetworkResponse, error)
	mustEmbedUnimplementedGameContentCurrencyServiceServer()
}

// UnimplementedGameContentCurrencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameContentCurrencyServiceServer struct {
}

func (UnimplementedGameContentCurrencyServiceServer) GetSingleCurrency(context.Context, *GetSingleCurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleCurrency not implemented")
}
func (UnimplementedGameContentCurrencyServiceServer) GetAllCurrencies(context.Context, *emptypb.Empty) (*ListCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCurrencies not implemented")
}
func (UnimplementedGameContentCurrencyServiceServer) GetAllNetworks(context.Context, *emptypb.Empty) (*ListNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNetworks not implemented")
}
func (UnimplementedGameContentCurrencyServiceServer) mustEmbedUnimplementedGameContentCurrencyServiceServer() {
}

// UnsafeGameContentCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameContentCurrencyServiceServer will
// result in compilation errors.
type UnsafeGameContentCurrencyServiceServer interface {
	mustEmbedUnimplementedGameContentCurrencyServiceServer()
}

func RegisterGameContentCurrencyServiceServer(s grpc.ServiceRegistrar, srv GameContentCurrencyServiceServer) {
	s.RegisterService(&GameContentCurrencyService_ServiceDesc, srv)
}

func _GameContentCurrencyService_GetSingleCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentCurrencyServiceServer).GetSingleCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.currency.GameContentCurrencyService/GetSingleCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentCurrencyServiceServer).GetSingleCurrency(ctx, req.(*GetSingleCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentCurrencyService_GetAllCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentCurrencyServiceServer).GetAllCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.currency.GameContentCurrencyService/GetAllCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentCurrencyServiceServer).GetAllCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentCurrencyService_GetAllNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentCurrencyServiceServer).GetAllNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.currency.GameContentCurrencyService/GetAllNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentCurrencyServiceServer).GetAllNetworks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GameContentCurrencyService_ServiceDesc is the grpc.ServiceDesc for GameContentCurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameContentCurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.currency.GameContentCurrencyService",
	HandlerType: (*GameContentCurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSingleCurrency",
			Handler:    _GameContentCurrencyService_GetSingleCurrency_Handler,
		},
		{
			MethodName: "GetAllCurrencies",
			Handler:    _GameContentCurrencyService_GetAllCurrencies_Handler,
		},
		{
			MethodName: "GetAllNetworks",
			Handler:    _GameContentCurrencyService_GetAllNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_currency.proto",
}
