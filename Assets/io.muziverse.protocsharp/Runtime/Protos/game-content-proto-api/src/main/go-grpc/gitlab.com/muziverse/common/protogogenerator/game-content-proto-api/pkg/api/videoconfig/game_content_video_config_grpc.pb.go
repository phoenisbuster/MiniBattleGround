// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_video_config.proto

package videoconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameVideoLinkConfigServiceClient is the client API for GameVideoLinkConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameVideoLinkConfigServiceClient interface {
	GetVideoLinkConfig(ctx context.Context, in *GetVideoLinkConfigRequest, opts ...grpc.CallOption) (*VideoLinkConfigResponse, error)
	GetVideoLinkConfigByIds(ctx context.Context, in *GetVideoLinkConfigByIdsRequest, opts ...grpc.CallOption) (*VideoLinkConfigResponse, error)
	CreateVideoLinkConfig(ctx context.Context, in *CreateVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVideoLinkConfig(ctx context.Context, in *UpdateVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVideoLinkConfig(ctx context.Context, in *DeleteVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameVideoLinkConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameVideoLinkConfigServiceClient(cc grpc.ClientConnInterface) GameVideoLinkConfigServiceClient {
	return &gameVideoLinkConfigServiceClient{cc}
}

func (c *gameVideoLinkConfigServiceClient) GetVideoLinkConfig(ctx context.Context, in *GetVideoLinkConfigRequest, opts ...grpc.CallOption) (*VideoLinkConfigResponse, error) {
	out := new(VideoLinkConfigResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.videoconfig.GameVideoLinkConfigService/GetVideoLinkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameVideoLinkConfigServiceClient) GetVideoLinkConfigByIds(ctx context.Context, in *GetVideoLinkConfigByIdsRequest, opts ...grpc.CallOption) (*VideoLinkConfigResponse, error) {
	out := new(VideoLinkConfigResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.videoconfig.GameVideoLinkConfigService/GetVideoLinkConfigByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameVideoLinkConfigServiceClient) CreateVideoLinkConfig(ctx context.Context, in *CreateVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.videoconfig.GameVideoLinkConfigService/CreateVideoLinkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameVideoLinkConfigServiceClient) UpdateVideoLinkConfig(ctx context.Context, in *UpdateVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.videoconfig.GameVideoLinkConfigService/UpdateVideoLinkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameVideoLinkConfigServiceClient) DeleteVideoLinkConfig(ctx context.Context, in *DeleteVideoLinkConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.videoconfig.GameVideoLinkConfigService/DeleteVideoLinkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameVideoLinkConfigServiceServer is the server API for GameVideoLinkConfigService service.
// All implementations must embed UnimplementedGameVideoLinkConfigServiceServer
// for forward compatibility
type GameVideoLinkConfigServiceServer interface {
	GetVideoLinkConfig(context.Context, *GetVideoLinkConfigRequest) (*VideoLinkConfigResponse, error)
	GetVideoLinkConfigByIds(context.Context, *GetVideoLinkConfigByIdsRequest) (*VideoLinkConfigResponse, error)
	CreateVideoLinkConfig(context.Context, *CreateVideoLinkConfigRequest) (*emptypb.Empty, error)
	UpdateVideoLinkConfig(context.Context, *UpdateVideoLinkConfigRequest) (*emptypb.Empty, error)
	DeleteVideoLinkConfig(context.Context, *DeleteVideoLinkConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameVideoLinkConfigServiceServer()
}

// UnimplementedGameVideoLinkConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameVideoLinkConfigServiceServer struct {
}

func (UnimplementedGameVideoLinkConfigServiceServer) GetVideoLinkConfig(context.Context, *GetVideoLinkConfigRequest) (*VideoLinkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLinkConfig not implemented")
}
func (UnimplementedGameVideoLinkConfigServiceServer) GetVideoLinkConfigByIds(context.Context, *GetVideoLinkConfigByIdsRequest) (*VideoLinkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLinkConfigByIds not implemented")
}
func (UnimplementedGameVideoLinkConfigServiceServer) CreateVideoLinkConfig(context.Context, *CreateVideoLinkConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoLinkConfig not implemented")
}
func (UnimplementedGameVideoLinkConfigServiceServer) UpdateVideoLinkConfig(context.Context, *UpdateVideoLinkConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoLinkConfig not implemented")
}
func (UnimplementedGameVideoLinkConfigServiceServer) DeleteVideoLinkConfig(context.Context, *DeleteVideoLinkConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoLinkConfig not implemented")
}
func (UnimplementedGameVideoLinkConfigServiceServer) mustEmbedUnimplementedGameVideoLinkConfigServiceServer() {
}

// UnsafeGameVideoLinkConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameVideoLinkConfigServiceServer will
// result in compilation errors.
type UnsafeGameVideoLinkConfigServiceServer interface {
	mustEmbedUnimplementedGameVideoLinkConfigServiceServer()
}

func RegisterGameVideoLinkConfigServiceServer(s grpc.ServiceRegistrar, srv GameVideoLinkConfigServiceServer) {
	s.RegisterService(&GameVideoLinkConfigService_ServiceDesc, srv)
}

func _GameVideoLinkConfigService_GetVideoLinkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoLinkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameVideoLinkConfigServiceServer).GetVideoLinkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.videoconfig.GameVideoLinkConfigService/GetVideoLinkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameVideoLinkConfigServiceServer).GetVideoLinkConfig(ctx, req.(*GetVideoLinkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameVideoLinkConfigService_GetVideoLinkConfigByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoLinkConfigByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameVideoLinkConfigServiceServer).GetVideoLinkConfigByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.videoconfig.GameVideoLinkConfigService/GetVideoLinkConfigByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameVideoLinkConfigServiceServer).GetVideoLinkConfigByIds(ctx, req.(*GetVideoLinkConfigByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameVideoLinkConfigService_CreateVideoLinkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoLinkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameVideoLinkConfigServiceServer).CreateVideoLinkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.videoconfig.GameVideoLinkConfigService/CreateVideoLinkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameVideoLinkConfigServiceServer).CreateVideoLinkConfig(ctx, req.(*CreateVideoLinkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameVideoLinkConfigService_UpdateVideoLinkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoLinkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameVideoLinkConfigServiceServer).UpdateVideoLinkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.videoconfig.GameVideoLinkConfigService/UpdateVideoLinkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameVideoLinkConfigServiceServer).UpdateVideoLinkConfig(ctx, req.(*UpdateVideoLinkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameVideoLinkConfigService_DeleteVideoLinkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoLinkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameVideoLinkConfigServiceServer).DeleteVideoLinkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.videoconfig.GameVideoLinkConfigService/DeleteVideoLinkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameVideoLinkConfigServiceServer).DeleteVideoLinkConfig(ctx, req.(*DeleteVideoLinkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameVideoLinkConfigService_ServiceDesc is the grpc.ServiceDesc for GameVideoLinkConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameVideoLinkConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.videoconfig.GameVideoLinkConfigService",
	HandlerType: (*GameVideoLinkConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoLinkConfig",
			Handler:    _GameVideoLinkConfigService_GetVideoLinkConfig_Handler,
		},
		{
			MethodName: "GetVideoLinkConfigByIds",
			Handler:    _GameVideoLinkConfigService_GetVideoLinkConfigByIds_Handler,
		},
		{
			MethodName: "CreateVideoLinkConfig",
			Handler:    _GameVideoLinkConfigService_CreateVideoLinkConfig_Handler,
		},
		{
			MethodName: "UpdateVideoLinkConfig",
			Handler:    _GameVideoLinkConfigService_UpdateVideoLinkConfig_Handler,
		},
		{
			MethodName: "DeleteVideoLinkConfig",
			Handler:    _GameVideoLinkConfigService_DeleteVideoLinkConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_video_config.proto",
}
