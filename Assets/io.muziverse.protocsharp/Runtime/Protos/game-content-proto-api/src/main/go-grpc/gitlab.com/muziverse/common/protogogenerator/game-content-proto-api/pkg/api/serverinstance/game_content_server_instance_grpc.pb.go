// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: game_content_server_instance.proto

package serverinstance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameContentServerInstanceServiceClient is the client API for GameContentServerInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameContentServerInstanceServiceClient interface {
	GetServerInstances(ctx context.Context, in *ServerInstanceQueryRequest, opts ...grpc.CallOption) (*ListServerInstanceResponse, error)
	CreateServerInstance(ctx context.Context, in *CreateServerInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateServerInstance(ctx context.Context, in *UpdateServerInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteServerInstanceByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameContentServerInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameContentServerInstanceServiceClient(cc grpc.ClientConnInterface) GameContentServerInstanceServiceClient {
	return &gameContentServerInstanceServiceClient{cc}
}

func (c *gameContentServerInstanceServiceClient) GetServerInstances(ctx context.Context, in *ServerInstanceQueryRequest, opts ...grpc.CallOption) (*ListServerInstanceResponse, error) {
	out := new(ListServerInstanceResponse)
	err := c.cc.Invoke(ctx, "/gamecontent.serverinstance.GameContentServerInstanceService/GetServerInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentServerInstanceServiceClient) CreateServerInstance(ctx context.Context, in *CreateServerInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.serverinstance.GameContentServerInstanceService/CreateServerInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentServerInstanceServiceClient) UpdateServerInstance(ctx context.Context, in *UpdateServerInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.serverinstance.GameContentServerInstanceService/UpdateServerInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameContentServerInstanceServiceClient) DeleteServerInstanceByCode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gamecontent.serverinstance.GameContentServerInstanceService/DeleteServerInstanceByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameContentServerInstanceServiceServer is the server API for GameContentServerInstanceService service.
// All implementations must embed UnimplementedGameContentServerInstanceServiceServer
// for forward compatibility
type GameContentServerInstanceServiceServer interface {
	GetServerInstances(context.Context, *ServerInstanceQueryRequest) (*ListServerInstanceResponse, error)
	CreateServerInstance(context.Context, *CreateServerInstanceRequest) (*emptypb.Empty, error)
	UpdateServerInstance(context.Context, *UpdateServerInstanceRequest) (*emptypb.Empty, error)
	DeleteServerInstanceByCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameContentServerInstanceServiceServer()
}

// UnimplementedGameContentServerInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameContentServerInstanceServiceServer struct {
}

func (UnimplementedGameContentServerInstanceServiceServer) GetServerInstances(context.Context, *ServerInstanceQueryRequest) (*ListServerInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInstances not implemented")
}
func (UnimplementedGameContentServerInstanceServiceServer) CreateServerInstance(context.Context, *CreateServerInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServerInstance not implemented")
}
func (UnimplementedGameContentServerInstanceServiceServer) UpdateServerInstance(context.Context, *UpdateServerInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerInstance not implemented")
}
func (UnimplementedGameContentServerInstanceServiceServer) DeleteServerInstanceByCode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServerInstanceByCode not implemented")
}
func (UnimplementedGameContentServerInstanceServiceServer) mustEmbedUnimplementedGameContentServerInstanceServiceServer() {
}

// UnsafeGameContentServerInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameContentServerInstanceServiceServer will
// result in compilation errors.
type UnsafeGameContentServerInstanceServiceServer interface {
	mustEmbedUnimplementedGameContentServerInstanceServiceServer()
}

func RegisterGameContentServerInstanceServiceServer(s grpc.ServiceRegistrar, srv GameContentServerInstanceServiceServer) {
	s.RegisterService(&GameContentServerInstanceService_ServiceDesc, srv)
}

func _GameContentServerInstanceService_GetServerInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInstanceQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentServerInstanceServiceServer).GetServerInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.serverinstance.GameContentServerInstanceService/GetServerInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentServerInstanceServiceServer).GetServerInstances(ctx, req.(*ServerInstanceQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentServerInstanceService_CreateServerInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentServerInstanceServiceServer).CreateServerInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.serverinstance.GameContentServerInstanceService/CreateServerInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentServerInstanceServiceServer).CreateServerInstance(ctx, req.(*CreateServerInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentServerInstanceService_UpdateServerInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentServerInstanceServiceServer).UpdateServerInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.serverinstance.GameContentServerInstanceService/UpdateServerInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentServerInstanceServiceServer).UpdateServerInstance(ctx, req.(*UpdateServerInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameContentServerInstanceService_DeleteServerInstanceByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameContentServerInstanceServiceServer).DeleteServerInstanceByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamecontent.serverinstance.GameContentServerInstanceService/DeleteServerInstanceByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameContentServerInstanceServiceServer).DeleteServerInstanceByCode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// GameContentServerInstanceService_ServiceDesc is the grpc.ServiceDesc for GameContentServerInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameContentServerInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamecontent.serverinstance.GameContentServerInstanceService",
	HandlerType: (*GameContentServerInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInstances",
			Handler:    _GameContentServerInstanceService_GetServerInstances_Handler,
		},
		{
			MethodName: "CreateServerInstance",
			Handler:    _GameContentServerInstanceService_CreateServerInstance_Handler,
		},
		{
			MethodName: "UpdateServerInstance",
			Handler:    _GameContentServerInstanceService_UpdateServerInstance_Handler,
		},
		{
			MethodName: "DeleteServerInstanceByCode",
			Handler:    _GameContentServerInstanceService_DeleteServerInstanceByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_content_server_instance.proto",
}
