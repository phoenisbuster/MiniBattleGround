// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: notification.proto

package notification

import (
	context "context"
	domain "gitlab.com/muziverse/common/protogogenerator/user-notification-proto-api/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SubscribeNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (NotificationService_SubscribeNotificationClient, error)
	GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GameNotificationMessageLiteResponse, error)
	GetNotificationDetail(ctx context.Context, in *GetNotificationDetailRequest, opts ...grpc.CallOption) (*domain.GameNotificationMessage, error)
	MarkReadNotification(ctx context.Context, in *MarkReadNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllUnreadNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SubscribeNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (NotificationService_SubscribeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/usernotification.notification.NotificationService/SubscribeNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceSubscribeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_SubscribeNotificationClient interface {
	Recv() (*domain.StreamNotificationMessageResponse, error)
	grpc.ClientStream
}

type notificationServiceSubscribeNotificationClient struct {
	grpc.ClientStream
}

func (x *notificationServiceSubscribeNotificationClient) Recv() (*domain.StreamNotificationMessageResponse, error) {
	m := new(domain.StreamNotificationMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) GetNotificationList(ctx context.Context, in *GetNotificationListRequest, opts ...grpc.CallOption) (*GameNotificationMessageLiteResponse, error) {
	out := new(GameNotificationMessageLiteResponse)
	err := c.cc.Invoke(ctx, "/usernotification.notification.NotificationService/GetNotificationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationDetail(ctx context.Context, in *GetNotificationDetailRequest, opts ...grpc.CallOption) (*domain.GameNotificationMessage, error) {
	out := new(domain.GameNotificationMessage)
	err := c.cc.Invoke(ctx, "/usernotification.notification.NotificationService/GetNotificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkReadNotification(ctx context.Context, in *MarkReadNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/usernotification.notification.NotificationService/MarkReadNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetAllUnreadNotification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/usernotification.notification.NotificationService/GetAllUnreadNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SubscribeNotification(*emptypb.Empty, NotificationService_SubscribeNotificationServer) error
	GetNotificationList(context.Context, *GetNotificationListRequest) (*GameNotificationMessageLiteResponse, error)
	GetNotificationDetail(context.Context, *GetNotificationDetailRequest) (*domain.GameNotificationMessage, error)
	MarkReadNotification(context.Context, *MarkReadNotificationRequest) (*emptypb.Empty, error)
	GetAllUnreadNotification(context.Context, *emptypb.Empty) (*wrapperspb.Int64Value, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SubscribeNotification(*emptypb.Empty, NotificationService_SubscribeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationList(context.Context, *GetNotificationListRequest) (*GameNotificationMessageLiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationList not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationDetail(context.Context, *GetNotificationDetailRequest) (*domain.GameNotificationMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationDetail not implemented")
}
func (UnimplementedNotificationServiceServer) MarkReadNotification(context.Context, *MarkReadNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkReadNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetAllUnreadNotification(context.Context, *emptypb.Empty) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUnreadNotification not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SubscribeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).SubscribeNotification(m, &notificationServiceSubscribeNotificationServer{stream})
}

type NotificationService_SubscribeNotificationServer interface {
	Send(*domain.StreamNotificationMessageResponse) error
	grpc.ServerStream
}

type notificationServiceSubscribeNotificationServer struct {
	grpc.ServerStream
}

func (x *notificationServiceSubscribeNotificationServer) Send(m *domain.StreamNotificationMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_GetNotificationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usernotification.notification.NotificationService/GetNotificationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationList(ctx, req.(*GetNotificationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usernotification.notification.NotificationService/GetNotificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationDetail(ctx, req.(*GetNotificationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkReadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkReadNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkReadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usernotification.notification.NotificationService/MarkReadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkReadNotification(ctx, req.(*MarkReadNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetAllUnreadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetAllUnreadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usernotification.notification.NotificationService/GetAllUnreadNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetAllUnreadNotification(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usernotification.notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotificationList",
			Handler:    _NotificationService_GetNotificationList_Handler,
		},
		{
			MethodName: "GetNotificationDetail",
			Handler:    _NotificationService_GetNotificationDetail_Handler,
		},
		{
			MethodName: "MarkReadNotification",
			Handler:    _NotificationService_MarkReadNotification_Handler,
		},
		{
			MethodName: "GetAllUnreadNotification",
			Handler:    _NotificationService_GetAllUnreadNotification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNotification",
			Handler:       _NotificationService_SubscribeNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}
