// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: scheduler_job.proto

package job

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobType int32

const (
	JobType_SINGLE_CRON_JOB   JobType = 0
	JobType_SINGLE_SIMPLE_JOB JobType = 1
	JobType_MULTI_CRON_JOB    JobType = 2
	JobType_MULTI_SIMPLE_JOB  JobType = 3
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "SINGLE_CRON_JOB",
		1: "SINGLE_SIMPLE_JOB",
		2: "MULTI_CRON_JOB",
		3: "MULTI_SIMPLE_JOB",
	}
	JobType_value = map[string]int32{
		"SINGLE_CRON_JOB":   0,
		"SINGLE_SIMPLE_JOB": 1,
		"MULTI_CRON_JOB":    2,
		"MULTI_SIMPLE_JOB":  3,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_job_proto_enumTypes[0].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_scheduler_job_proto_enumTypes[0]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{0}
}

type EventType int32

const (
	EventType_UNSUPPORT_EVENT_TYPE           EventType = 0
	EventType_REFRESH_ALLOCATED_GAME_SERVERS EventType = 1
	EventType_CLEAN_OBSOLETE_TOKEN           EventType = 2
	EventType_CLEAN_OBSOLETE_RESOURCE        EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "UNSUPPORT_EVENT_TYPE",
		1: "REFRESH_ALLOCATED_GAME_SERVERS",
		2: "CLEAN_OBSOLETE_TOKEN",
		3: "CLEAN_OBSOLETE_RESOURCE",
	}
	EventType_value = map[string]int32{
		"UNSUPPORT_EVENT_TYPE":           0,
		"REFRESH_ALLOCATED_GAME_SERVERS": 1,
		"CLEAN_OBSOLETE_TOKEN":           2,
		"CLEAN_OBSOLETE_RESOURCE":        3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_job_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_scheduler_job_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{1}
}

type MisfireInstruction int32

const (
	MisfireInstruction_MISFIRE_INSTRUCTION_FIRE_NOW                                   MisfireInstruction = 0
	MisfireInstruction_MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT  MisfireInstruction = 1
	MisfireInstruction_MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT MisfireInstruction = 2
	MisfireInstruction_MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT        MisfireInstruction = 3
)

// Enum value maps for MisfireInstruction.
var (
	MisfireInstruction_name = map[int32]string{
		0: "MISFIRE_INSTRUCTION_FIRE_NOW",
		1: "MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT",
		2: "MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT",
		3: "MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT",
	}
	MisfireInstruction_value = map[string]int32{
		"MISFIRE_INSTRUCTION_FIRE_NOW":                                   0,
		"MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT":  1,
		"MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT": 2,
		"MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT":        3,
	}
)

func (x MisfireInstruction) Enum() *MisfireInstruction {
	p := new(MisfireInstruction)
	*p = x
	return p
}

func (x MisfireInstruction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MisfireInstruction) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_job_proto_enumTypes[2].Descriptor()
}

func (MisfireInstruction) Type() protoreflect.EnumType {
	return &file_scheduler_job_proto_enumTypes[2]
}

func (x MisfireInstruction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MisfireInstruction.Descriptor instead.
func (MisfireInstruction) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{2}
}

type JobStatus int32

const (
	JobStatus_ACTIVE JobStatus = 0
	JobStatus_PAUSED JobStatus = 1
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "PAUSED",
	}
	JobStatus_value = map[string]int32{
		"ACTIVE": 0,
		"PAUSED": 1,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_job_proto_enumTypes[3].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_scheduler_job_proto_enumTypes[3]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{3}
}

type JobsUpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*JobCreationRequest `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobsUpsertRequest) Reset() {
	*x = JobsUpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobsUpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsUpsertRequest) ProtoMessage() {}

func (x *JobsUpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsUpsertRequest.ProtoReflect.Descriptor instead.
func (*JobsUpsertRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{0}
}

func (x *JobsUpsertRequest) GetJobs() []*JobCreationRequest {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	JobType            JobType            `protobuf:"varint,3,opt,name=job_type,json=jobType,proto3,enum=scheduler.job.JobType" json:"job_type,omitempty"`
	EventType          EventType          `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=scheduler.job.EventType" json:"event_type,omitempty"`
	MisfireInstruction MisfireInstruction `protobuf:"varint,5,opt,name=misfire_instruction,json=misfireInstruction,proto3,enum=scheduler.job.MisfireInstruction" json:"misfire_instruction,omitempty"`
	StartTime          int64              `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StartDelay         int64              `protobuf:"varint,7,opt,name=start_delay,json=startDelay,proto3" json:"start_delay,omitempty"`
	// Types that are assignable to Job:
	//	*JobCreationRequest_Simple
	//	*JobCreationRequest_Cron
	Job isJobCreationRequest_Job `protobuf_oneof:"job"`
}

func (x *JobCreationRequest) Reset() {
	*x = JobCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCreationRequest) ProtoMessage() {}

func (x *JobCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCreationRequest.ProtoReflect.Descriptor instead.
func (*JobCreationRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{1}
}

func (x *JobCreationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobCreationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobCreationRequest) GetJobType() JobType {
	if x != nil {
		return x.JobType
	}
	return JobType_SINGLE_CRON_JOB
}

func (x *JobCreationRequest) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_UNSUPPORT_EVENT_TYPE
}

func (x *JobCreationRequest) GetMisfireInstruction() MisfireInstruction {
	if x != nil {
		return x.MisfireInstruction
	}
	return MisfireInstruction_MISFIRE_INSTRUCTION_FIRE_NOW
}

func (x *JobCreationRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobCreationRequest) GetStartDelay() int64 {
	if x != nil {
		return x.StartDelay
	}
	return 0
}

func (m *JobCreationRequest) GetJob() isJobCreationRequest_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (x *JobCreationRequest) GetSimple() *SimpleJobCreationRequest {
	if x, ok := x.GetJob().(*JobCreationRequest_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *JobCreationRequest) GetCron() *CronJobCreationRequest {
	if x, ok := x.GetJob().(*JobCreationRequest_Cron); ok {
		return x.Cron
	}
	return nil
}

type isJobCreationRequest_Job interface {
	isJobCreationRequest_Job()
}

type JobCreationRequest_Simple struct {
	Simple *SimpleJobCreationRequest `protobuf:"bytes,8,opt,name=simple,proto3,oneof"`
}

type JobCreationRequest_Cron struct {
	Cron *CronJobCreationRequest `protobuf:"bytes,9,opt,name=cron,proto3,oneof"`
}

func (*JobCreationRequest_Simple) isJobCreationRequest_Job() {}

func (*JobCreationRequest_Cron) isJobCreationRequest_Job() {}

type SimpleJobCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepeatInterval int64 `protobuf:"varint,1,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeat_interval,omitempty"`
	RepeatCount    int32 `protobuf:"varint,2,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"`
}

func (x *SimpleJobCreationRequest) Reset() {
	*x = SimpleJobCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleJobCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleJobCreationRequest) ProtoMessage() {}

func (x *SimpleJobCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleJobCreationRequest.ProtoReflect.Descriptor instead.
func (*SimpleJobCreationRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleJobCreationRequest) GetRepeatInterval() int64 {
	if x != nil {
		return x.RepeatInterval
	}
	return 0
}

func (x *SimpleJobCreationRequest) GetRepeatCount() int32 {
	if x != nil {
		return x.RepeatCount
	}
	return 0
}

type CronJobCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronExpression string `protobuf:"bytes,1,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
}

func (x *CronJobCreationRequest) Reset() {
	*x = CronJobCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobCreationRequest) ProtoMessage() {}

func (x *CronJobCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobCreationRequest.ProtoReflect.Descriptor instead.
func (*CronJobCreationRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{3}
}

func (x *CronJobCreationRequest) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

type JobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               JobType            `protobuf:"varint,3,opt,name=type,proto3,enum=scheduler.job.JobType" json:"type,omitempty"`
	Status             JobStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=scheduler.job.JobStatus" json:"status,omitempty"`
	Event              EventType          `protobuf:"varint,5,opt,name=event,proto3,enum=scheduler.job.EventType" json:"event,omitempty"`
	MisfireInstruction MisfireInstruction `protobuf:"varint,6,opt,name=misfire_instruction,json=misfireInstruction,proto3,enum=scheduler.job.MisfireInstruction" json:"misfire_instruction,omitempty"`
	StartTime          int64              `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StartDelay         int64              `protobuf:"varint,8,opt,name=start_delay,json=startDelay,proto3" json:"start_delay,omitempty"`
	RepeatInterval     int64              `protobuf:"varint,9,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeat_interval,omitempty"`
	RepeatCount        int32              `protobuf:"varint,10,opt,name=repeat_count,json=repeatCount,proto3" json:"repeat_count,omitempty"`
	CronExpression     string             `protobuf:"bytes,11,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
}

func (x *JobResponse) Reset() {
	*x = JobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResponse) ProtoMessage() {}

func (x *JobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResponse.ProtoReflect.Descriptor instead.
func (*JobResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{4}
}

func (x *JobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobResponse) GetType() JobType {
	if x != nil {
		return x.Type
	}
	return JobType_SINGLE_CRON_JOB
}

func (x *JobResponse) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_ACTIVE
}

func (x *JobResponse) GetEvent() EventType {
	if x != nil {
		return x.Event
	}
	return EventType_UNSUPPORT_EVENT_TYPE
}

func (x *JobResponse) GetMisfireInstruction() MisfireInstruction {
	if x != nil {
		return x.MisfireInstruction
	}
	return MisfireInstruction_MISFIRE_INSTRUCTION_FIRE_NOW
}

func (x *JobResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobResponse) GetStartDelay() int64 {
	if x != nil {
		return x.StartDelay
	}
	return 0
}

func (x *JobResponse) GetRepeatInterval() int64 {
	if x != nil {
		return x.RepeatInterval
	}
	return 0
}

func (x *JobResponse) GetRepeatCount() int32 {
	if x != nil {
		return x.RepeatCount
	}
	return 0
}

func (x *JobResponse) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

type JobIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIds []string `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
}

func (x *JobIdsRequest) Reset() {
	*x = JobIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobIdsRequest) ProtoMessage() {}

func (x *JobIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobIdsRequest.ProtoReflect.Descriptor instead.
func (*JobIdsRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{5}
}

func (x *JobIdsRequest) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

type JobListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*JobResponse `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *JobListResponse) Reset() {
	*x = JobListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobListResponse) ProtoMessage() {}

func (x *JobListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobListResponse.ProtoReflect.Descriptor instead.
func (*JobListResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_job_proto_rawDescGZIP(), []int{6}
}

func (x *JobListResponse) GetItems() []*JobResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_scheduler_job_proto protoreflect.FileDescriptor

var file_scheduler_job_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x6a, 0x6f, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x73, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xbf, 0x03,
	0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x6d, 0x69, 0x73, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x4d, 0x69, 0x73, 0x66, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x66, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a,
	0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x22,
	0x66, 0x0a, 0x18, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x43, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x03, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x13,
	0x6d, 0x69, 0x73, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4d, 0x69, 0x73, 0x66, 0x69, 0x72,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d, 0x69,
	0x73, 0x66, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x22,
	0x43, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2a, 0x5f, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4a,
	0x4f, 0x42, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x4a, 0x4f, 0x42, 0x10, 0x03, 0x2a, 0x80, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x2a, 0xfa, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x73,
	0x66, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x53, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x10,
	0x00, 0x12, 0x41, 0x0a, 0x3d, 0x4d, 0x49, 0x53, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x4d, 0x49, 0x53, 0x46, 0x49, 0x52, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x3b, 0x0a, 0x37, 0x4d, 0x49, 0x53, 0x46,
	0x49, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x23, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x32, 0xc3, 0x03, 0x0a, 0x10, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x21, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x42, 0x82, 0x01, 0x0a, 0x24, 0x69, 0x6f, 0x2e, 0x6d, 0x75, 0x7a, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6a, 0x6f, 0x62, 0x42, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75, 0x7a, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_job_proto_rawDescOnce sync.Once
	file_scheduler_job_proto_rawDescData = file_scheduler_job_proto_rawDesc
)

func file_scheduler_job_proto_rawDescGZIP() []byte {
	file_scheduler_job_proto_rawDescOnce.Do(func() {
		file_scheduler_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_job_proto_rawDescData)
	})
	return file_scheduler_job_proto_rawDescData
}

var file_scheduler_job_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_scheduler_job_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scheduler_job_proto_goTypes = []interface{}{
	(JobType)(0),                     // 0: scheduler.job.JobType
	(EventType)(0),                   // 1: scheduler.job.EventType
	(MisfireInstruction)(0),          // 2: scheduler.job.MisfireInstruction
	(JobStatus)(0),                   // 3: scheduler.job.JobStatus
	(*JobsUpsertRequest)(nil),        // 4: scheduler.job.JobsUpsertRequest
	(*JobCreationRequest)(nil),       // 5: scheduler.job.JobCreationRequest
	(*SimpleJobCreationRequest)(nil), // 6: scheduler.job.SimpleJobCreationRequest
	(*CronJobCreationRequest)(nil),   // 7: scheduler.job.CronJobCreationRequest
	(*JobResponse)(nil),              // 8: scheduler.job.JobResponse
	(*JobIdsRequest)(nil),            // 9: scheduler.job.JobIdsRequest
	(*JobListResponse)(nil),          // 10: scheduler.job.JobListResponse
	(*wrapperspb.StringValue)(nil),   // 11: google.protobuf.StringValue
	(*emptypb.Empty)(nil),            // 12: google.protobuf.Empty
}
var file_scheduler_job_proto_depIdxs = []int32{
	5,  // 0: scheduler.job.JobsUpsertRequest.jobs:type_name -> scheduler.job.JobCreationRequest
	0,  // 1: scheduler.job.JobCreationRequest.job_type:type_name -> scheduler.job.JobType
	1,  // 2: scheduler.job.JobCreationRequest.event_type:type_name -> scheduler.job.EventType
	2,  // 3: scheduler.job.JobCreationRequest.misfire_instruction:type_name -> scheduler.job.MisfireInstruction
	6,  // 4: scheduler.job.JobCreationRequest.simple:type_name -> scheduler.job.SimpleJobCreationRequest
	7,  // 5: scheduler.job.JobCreationRequest.cron:type_name -> scheduler.job.CronJobCreationRequest
	0,  // 6: scheduler.job.JobResponse.type:type_name -> scheduler.job.JobType
	3,  // 7: scheduler.job.JobResponse.status:type_name -> scheduler.job.JobStatus
	1,  // 8: scheduler.job.JobResponse.event:type_name -> scheduler.job.EventType
	2,  // 9: scheduler.job.JobResponse.misfire_instruction:type_name -> scheduler.job.MisfireInstruction
	8,  // 10: scheduler.job.JobListResponse.items:type_name -> scheduler.job.JobResponse
	5,  // 11: scheduler.job.SchedulerService.CreateJob:input_type -> scheduler.job.JobCreationRequest
	11, // 12: scheduler.job.SchedulerService.DeleteJob:input_type -> google.protobuf.StringValue
	11, // 13: scheduler.job.SchedulerService.PauseJob:input_type -> google.protobuf.StringValue
	11, // 14: scheduler.job.SchedulerService.ResumeJob:input_type -> google.protobuf.StringValue
	9,  // 15: scheduler.job.SchedulerService.GetJobs:input_type -> scheduler.job.JobIdsRequest
	4,  // 16: scheduler.job.SchedulerService.UpsertJobs:input_type -> scheduler.job.JobsUpsertRequest
	8,  // 17: scheduler.job.SchedulerService.CreateJob:output_type -> scheduler.job.JobResponse
	12, // 18: scheduler.job.SchedulerService.DeleteJob:output_type -> google.protobuf.Empty
	12, // 19: scheduler.job.SchedulerService.PauseJob:output_type -> google.protobuf.Empty
	12, // 20: scheduler.job.SchedulerService.ResumeJob:output_type -> google.protobuf.Empty
	10, // 21: scheduler.job.SchedulerService.GetJobs:output_type -> scheduler.job.JobListResponse
	12, // 22: scheduler.job.SchedulerService.UpsertJobs:output_type -> google.protobuf.Empty
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_scheduler_job_proto_init() }
func file_scheduler_job_proto_init() {
	if File_scheduler_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobsUpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleJobCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJobCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scheduler_job_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*JobCreationRequest_Simple)(nil),
		(*JobCreationRequest_Cron)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_job_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheduler_job_proto_goTypes,
		DependencyIndexes: file_scheduler_job_proto_depIdxs,
		EnumInfos:         file_scheduler_job_proto_enumTypes,
		MessageInfos:      file_scheduler_job_proto_msgTypes,
	}.Build()
	File_scheduler_job_proto = out.File
	file_scheduler_job_proto_rawDesc = nil
	file_scheduler_job_proto_goTypes = nil
	file_scheduler_job_proto_depIdxs = nil
}
